/*
* [[file:song7.sc][song7 workspace]]
* Notes
** Key A Major
| a  | 1 |
| b  | 2 |
| c# | 3 |
| d  | 4 |
| e  | 5 |
| f# | 6 |
| g# | 7 |

|----+----+----+----+----|
| a  |  9 |  0 |  0 |  1 |
| b  | 11 |  2 |  1 |  2 |
| c# |  1 |  4 |  2 |  3 |
| d  |  2 |  5 |  3 |  4 |
| d# |  3 |  6 | #3 | #4 |
| e  |  4 |  7 |  4 |  5 |
| f  |  5 |  8 | b5 | b6 |
| f# |  6 |  9 |  5 |  6 |
| g  |  7 | 10 | b6 | b7 |
| g# |  8 | 11 |  6 |  7 |
|----+----+----+----+----|

** T-Matrix 
|----+----+----+----+----+----+----+----|
|    |  8 |  9 | 11 |  1 |  2 |  4 |  6 |
|----+----+----+----+----+----+----+----|
|  8 |  0 |  1 |  3 |  5 |  6 |  8 | 10 |
|  9 | 11 |  0 |  2 |  4 |  5 |  7 |  9 |
| 11 |  9 | 10 |  0 |  2 |  3 |  5 |  7 |
|  1 |  7 |  8 | 10 |  0 |  1 |  3 |  5 |
|  2 |  6 |  7 |  9 | 11 |  0 |  2 |  4 |
|  4 |  4 |  5 |  7 |  9 | 10 |  0 |  2 |
|  6 |  2 |  3 |  5 |  7 |  8 | 10 |  0 |
|----+----+----+----+----+----+----+----|

** T-Matrix A Based
|----+----+----+----+----+----+----+----|
|    | 11 |  0 |  2 |  4 |  5 |  7 |  9 |
|----+----+----+----+----+----+----+----|
| 11 |  3 |  4 |  6 |  8 |  9 | 11 |  1 |
|  0 |  2 |  3 |  5 |  7 |  8 | 10 |  0 |
|  2 |  0 |  1 |  3 |  5 |  6 |  8 | 10 |
|  4 | 10 | 11 |  1 |  3 |  4 |  6 |  8 |
|  5 |  9 | 10 |  0 |  2 |  3 |  5 |  7 |
|  7 |  7 |  8 | 10 |  0 |  1 |  3 |  5 |
|  9 |  5 |  6 |  8 | 10 | 11 |  1 |  3 |
|----+----+----+----+----+----+----+----|

* Classes
** [[file:include/classes/Track.sc][Track Class]]
*** TODO Figure out how to add midi controls
 
/*
** [[file:include/classes/Notes.sc][Notes]]
** [[file:include/classes/PitchClass.sc][PitchClass]]
** Fix Durations
~fixDurations = { arg notes;

	notes.freqs.do({arg item, i;

		var dur = 0, count = i+1;

		if (item != 0,{
			dur = notes.waits[i];
			while({(notes.freqs[count] == 0) && (count < notes.freqs.size)},{
				dur = dur + notes.waits[count];
				count = count + 1;
			});

			notes.durations[i] = dur;
		},
		{
			notes.durations[i] = 0;
		}
		);


	});

	notes;
};

* SuperCollider
*/
** [[file:include/superInit.sc][SuperColliderInit]]
*/

/*
** [[file:include/synths/basic.sc][Basic SynthDef]]
*/
/*
** [[file:include/synths/evenVCO.sc][evenVCO]]
** [[file:include/synths/eCello.sc][eCello]]
 */


/*
** [[file:include/synths/eStrings.sc][eStrings]]
** FM

*/
/*
*** Raw FM
*/
(
 SynthDef(\rawFM, { |out, amp=1, attack=0.25, decay=0.5, sustain=1,  release=2,balance = 0,spread = 1, accelerate=0, hpf = 128,gate = 0, da = 2,
       freq=440, carP=1, modP=0.66, moduP =0.33, index=3, mul=0.1, detune=0.8, modAttack=0.15, modDecay=2, modSustain=1, modRelease=0.5|

       var env = EnvGen.ar(Env.adsr(attack, decay, sustain, release), gate: gate, doneAction:da);

     var mod = SinOsc.ar(freq * modP * EnvGen.kr(Env.adsr(modAttack, modDecay,modSustain,modRelease,2,-4,0)), 0, freq * index * LFNoise1.kr(5.reciprocal).abs);

     var modu = SinOsc.ar(freq * moduP * EnvGen.kr(Env.adsr(modAttack, modDecay,modSustain,modRelease,2,-4,0)), 0, freq * index * LFNoise1.kr(5.reciprocal).abs);

     var sig = (SinOsc.ar(([freq, freq+detune] * carP) + [mod + modu], 0, mul)) * env;

     sig = HPF.ar(sig,hpf);

     sig = LeakDC.ar(sig);

	 sig = Splay.ar(sig); 

     sig = Splay.ar(sig,spread,center:balance);

     OffsetOut.ar(out, sig * amp);

   }).add;
)


~channel4 = {arg num, vel = 1;
	     var ret;
	     num.postln;
	     ret = Synth("rawFM");
	     ret.set(\freq,num.midicps);
	     ret.set(\gate,1);
	     ret;
};
/*
*** Saxaphone
*/

// =====================================================================
// Sad Saxaphone
// =====================================================================

(
SynthDef("sadSax",
	{
		arg out = 0, freq = 110, gate = 0, amp = 1.0, da = 2,hpf = 590,
		attack = 0.5, decay = 2.0, sustain = 0.0, release = 0.2,
		fattack = 0.5,fdecay = 2.0, fsustain = 0.0,
		frelease = 0.1, aoc = 0.7, gain = 1, cutoff = 12200.00,
		bend = 0, spread = 1, balance = 0;

		var env, fenv, op1, op2, op3, op4, op5, op6,
		fb1, fb2, fb3, fb4, fb5, fb6, freq2, tmp,
		sig;

		env  = Env.adsr(attack,decay,sustain,release,curve: 'welch');
		env = EnvGen.kr(env, gate: gate,doneAction:da);

		fenv = Env.adsr(fattack,fdecay,fsustain,frelease,1,'sine');
		fenv = EnvGen.kr(fenv, gate);

		fenv = aoc*(fenv - 1) + 1;
	    freq = {freq * LFNoise2.kr(2.5,0.01,1)}!1;
		
		fb2 = FbNode(1);
		op2 = 0.7*(SinOsc.ar(freq*1.0,fb2, mul: env));
		fb2.write((0.47*Saw.ar(freq)) + op2);

		fb1 = FbNode(1);
		op1 = 0.95*SinOsc.ar(freq*1,(fb1) + (op2), mul: env);
		fb1.write((0.01*Saw.ar(freq)) + op1);

		sig = (op1);
		
	sig = MoogFF.ar
	(
		sig,
		cutoff*fenv,
		gain
	);

		sig = HPF.ar(sig,hpf);

		sig = LeakDC.ar(sig);

		sig = Splay.ar(sig,spread,center:balance);

		Out.ar(out,amp*sig);

}).send(s);

)



/*
**** Setup midi channel Sax
*/
~channel4 = {arg num, vel = 1;
	     var ret;
	     num.postln;
	     ret = Synth("sadSax");
	     ret.set(\freq,num.midicps);
	     ret.set(\gate,1);
	     ret;
};




/*
*** French Horn
*/

SynthDef("frenchHorn",
	  {
	    arg out = 0, freq = 110, gate = 0, amp = 0.250, da = 2,hpf = 20,
	        attack = 0.2, decay = 1.5, sustain = 0.6, release = 0.3,
	        fattack = 0.2,fdecay = 1.5, fsustain = 0.8,frelease = 0.3,
	        aoc = 0.9,gain = 0.7, cutoff = 10200.00,
	        bend = 0, spread = 0, balance = 0;
	
	    var sig, fb1, op1, op2, op3, env, fenv,tmp;

	    env  = Env.adsr(attack,decay,sustain,release,curve: 'welch');
	    env = EnvGen.kr(env, gate: gate,doneAction:da);

	    fenv = Env.adsr(fattack,fdecay,fsustain,frelease,1,'sine');
	    fenv = EnvGen.kr(fenv, gate);
	    fenv = aoc*(fenv - 1) + 1;
	    
		op3 = SinOsc.ar(3*freq);
	    op2 = SinOsc.ar(1*freq);

		  //		tmp = MouseX.kr(0,2).poll;
	    fb1 = FbNode(1);
	    op1 = SinOsc.ar(freq,(op2*1.35) + fb1 + (0.0637501*op3));	  
	    fb1.write(0.3* op1);	  	 
	    sig = env*op1;

		  
	    sig = RLPF.ar
	      (
	       sig,
	       cutoff*fenv,
	       gain
	       );
			  
	    sig = HPF.ar(sig,hpf);
		  
		  //	    sig = FreeVerb.ar(sig,0.33); // fan out...
		  
	    sig = LeakDC.ar(sig);
		  
	    sig = Splay.ar(sig,spread,center:balance);

	    Out.ar(out,amp*sig);
		  
	  }).send(s);



/*
**** Setup midi channel Sax
*/
~channel5 = {arg num, vel = 1;
	     var ret;
	     num.postln;
	     ret = Synth("frenchHorn");
	     ret.set(\freq,num.midicps);
	     ret.set(\gate,1);
	     ret;
};





/*
** Formants
*/

SynthDef("formant", {
    arg freq = 55, out = 0, amp = 0.5, da = 2, gate = 0,
      spread = 1, balance = 0, hpf = 420,bend = 0,
      attack = 1, decay = 2.50, sustain = 0.4, release = 0.75,
      fattack = 1, fdecay= 2.5,fsustain = 0.4,gain = 1,
      frelease = 0.5, aoc = 0.5, cutoff = 1500.00;

    var sig,sig2, env,fenv,  fb1, freq2;

    env  = Env.adsr(attack,decay,sustain,release);
	
    fenv = Env.adsr(fattack,fdecay,fsustain,frelease);
    fenv = EnvGen.kr(fenv, gate: gate,doneAction:da);
    fenv = aoc*(fenv - 1) + 1;

	//    freq = {freq  * bend.midiratio * LFNoise2.kr(1.0,0.0035,1)}!1;

    fb1 = FbNode(1);
    sig = Formant.ar(freq, freq*3, freq*3.75) + (0.15*fb1);
	
    fb1.write(sig);
	
    sig = sig*EnvGen.kr(env, gate: gate,doneAction:da);
	
    sig = MoogFF.ar
      (
       sig,
       cutoff*fenv,
       gain
       );
	
    sig = HPF.ar(sig,hpf);
	
    sig = LeakDC.ar(sig);
	
    sig = Splay.ar(sig,spread,center:balance);

    Out.ar(out,sig * amp);

  }).send(s);



/*
*** Midi Setup
*/

~channel0 = {arg num, vel = 1;
	     var ret;
	     num.postln;
	     ret = Synth("formant");
	     ret.set(\freq,num.midicps);
	     ret.set(\gate,1);
	     ret;
};


~channel0off = {arg num,vel;^nil;};

** Read Midi file
   SCHEDULED: <2019-05-07 Tue>
 */
/* SÃ©bastien Clara - Janvier 2016


   Import a midi file on 3 Arrays : notes, durations & dates


   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   Put or link this file in a specific directories
   Typical user-specific extension directories :
   OSX:	~/Library/Application Support/SuperCollider/Extensions/
   Linux: 	~/.local/share/SuperCollider/Extensions/

   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   Dependence : wslib on Quarks

   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   typeMidi => For noteOn & noteOff information.
   But with MuseScore, we don't have. So put typeMidi to 1.
   See the examples below.

*/

ImportMidiFile {
  *new {	arg file, typeMidi=0;

    var midiFile;
    var notes, durees, dates;
    var on, off, datesIndex;

    midiFile = SimpleMIDIFile.read(file);

    if (typeMidi == 0,{
	midiFile.noteEvents.do({ |i| if(i[2] == \noteOn,
	  {on = on.add(i)},
	  {off = off.add(i)})
	      });
      },{
	midiFile.noteEvents.do({ |i| if(i[5] != 0,
	  {on = on.add(i)},
	  {off = off.add(i)})
	      });
      });


    datesIndex = on.collect({|i| i[1]});

    datesIndex.asSet.asArray.sort.do({|date|
	  var indices;
	indices =  datesIndex.indicesOfEqual(date);

	notes = notes.add( indices.collect({|i| on[i][4]}) );

	durees = durees.add( indices.collect({|i|
		var offIndice, duree;
	      offIndice = off.collect({|j| j[4]}).detectIndex({|j| j == on[i][4]});
	      duree = off[offIndice][1] - on[i][1];
	      off.removeAt(offIndice);
	      duree;
	    }) );

	dates = dates.add( date );
      });



    ^[notes, durees, dates];
  }
}

/*
//////////////////////////////////////////////////////////////////////////
//	Usage :

m = SimpleMIDIFile.read("~/Desktop/bwv772.mid");
m.noteEvents.collect({ |i| i.postln }); ""
/*
[ 1, 97, noteOn, 0, 60, 127 ]
[ 1, 265, noteOff, 0, 60, 127 ]
[ 1, 278, noteOn, 2, 62, 127 ]
[ 1, 446, noteOff, 2, 62, 127 ]
*/
// => typeMidi by default

// notes, durations, dates <=
# n, d, t = ImportMidiFile("~/Desktop/bwv772.mid");

n
d
t


m = SimpleMIDIFile.read("~/Desktop/cadence.mid");
m.noteEvents.collect({ |i| i.postln }); ""
					/*
					  [ 0, 0, noteOn, 0, 72, 73 ]
					  [ 0, 479, noteOn, 0, 72, 0 ]
					  [ 0, 480, noteOn, 0, 69, 69 ]
					  [ 0, 959, noteOn, 0, 69, 0 ]
					*/
					// => typeMidi != 0 !!!!!!!!!!!!!!

					// notes, durations, dates <=
# n, d, t = ImportMidiFile("~/Desktop/cadence.mid", 1);

n
d
t

*/




