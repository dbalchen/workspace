#    -*- mode: org -*-


Archived entries from file /home/dbalchen/Desktop/tc.org


* DFAM
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-12-25 Tue 14:44
  :ARCHIVE_FILE: ~/Desktop/tc.org
  :ARCHIVE_CATEGORY: tc
  :END:

(

// Ndef(\dfam).clear
Ndef(\dfam, {
	var vco1Saw, vco1Pulse, vco1Mix, vco1Level, vco1Freq, vco1EnvAmt, vco1,
	vco2Saw, vco2Pulse, vco2Mix, vco2Sync, vco2Level, vco2Freq, vco2EnvAmt, vco2,
	vcoDecay, vcoDecayCurve,
	fmAmt,
	noise, noiseLevel,
	filterFreq, filterRes, filterMod, filterModAmt, filterNoise, filterDecay,
	envAttack, envDecay, envCurve, envLevel, trig, vel, amp, overdrive,
	sig, hisig, syncSkew;
	
	amp			= \amp.kr(spec:ControlSpec(-inf, 0, \db, 			default: 0)).dbamp;
	overdrive	= \overdrive.kr(spec:ControlSpec(-inf, 12, \db, 	default: 0)).dbamp;
	vco1Freq	= \vco1Freq.kr(spec:ControlSpec(1, 20000, \exp,		default: 50)).lag(0.0);
	vco1Mix 	= \vco1Mix.kr(spec:ControlSpec(0, 1, 				default: 0));
	vco1EnvAmt 	= \vco1EnvAmt.kr(spec:ControlSpec(-5, 5, 			default: 0));
	vco1Level 	= \vco1Level.kr(spec:\db).dbamp;
	
	vco2Freq 	= \vco2Freq.kr(spec:ControlSpec(1, 20000, \exp,		default: 50)).lag(0.0);
	vco2Mix 	= \vco2Mix.kr(spec:ControlSpec(0, 1, 				default: 0));
	vco2EnvAmt 	= \vco2EnvAmt.kr(spec:ControlSpec(-5, 5,			default: 0));
	vco2Sync	= \vco2Sync.kr(spec:ControlSpec(0, 1, step: 1,		default: 0));
	vco2Level 	= \vco2Level.kr(spec:\db).dbamp;
	
	vcoDecay 	= \vcoDecay.kr(spec:ControlSpec(0.1, 10, \exp, 		default: 1));
	vcoDecayCurve = \vcoDecayCurve.kr(spec:ControlSpec(-8, 8, 		default: 0));
	
	fmAmt 		= \fmAmt.kr(spec:ControlSpec(-2, 2, 				default: 0));
	noiseLevel 	= \noiseLevel.kr(spec:ControlSpec(-inf, 0, \db, 	default: -12)).dbamp;
	
	filterDecay = \filterDecay.kr(spec:ControlSpec(0.1, 10, \exp,	default: 1));
	filterModAmt= \filterModAmt.kr(spec:ControlSpec(-5, 5,			default: 0));
	filterNoise = \filterNoise.kr(spec:ControlSpec(0, 1,			default: 0));
	filterFreq 	= \filterFreq.kr(spec:ControlSpec(20, 20000, 		default: 1000)).lag(0.0);
	filterRes 	= \filterRes.kr(spec:ControlSpec(0.001, 4, 			default: 2));
	
	envAttack 	= \envAttack.kr(spec:ControlSpec(1/1000, 1/10, \exp, default: 1/50));
	envDecay 	= \envDecay.kr(spec:ControlSpec(0.1, 10, \exp,		default: 2));
	envCurve	= \envCurve.kr(spec:[-8, 8]);
	
	syncSkew = SinOsc.ar(1/40).range(-0.4, 0.4);
	syncSkew = 2.pow(syncSkew);
	
	// trig = Impulse.ar(1) * LFDNoise3.ar(50).range(-5, 0).dbamp;
	trig = \trig.tr(0);
	vel = Latch.ar(trig, trig > 0).lincurve(0, 1, 0.5, 1, -2);
	trig = Trig.ar(trig > 0, SampleDur.ir);
	
	vco1Level = EnvGen.ar(
		Env.perc(envAttack, envDecay, curve:envCurve),
		gate:trig,
		levelScale:vel * Latch.ar(vco1Level, trig),
		timeScale:vel
	);
	
	vco2Level = EnvGen.ar(
		Env.perc(envAttack, envDecay, curve:envCurve),
		gate:trig,
		levelScale:vel * Latch.ar(vco2Level, trig),
		timeScale:vel
	);
	
	noiseLevel = EnvGen.ar(
		Env.perc(envAttack, envDecay, curve:envCurve),
		gate:trig,
		levelScale:vel * Latch.ar(noiseLevel, trig),
		timeScale:vel
	);
	
	vcoDecay = EnvGen.ar(
		Env.perc(0, vcoDecay, curve:vcoDecayCurve),
		gate:trig,
		levelScale:vel,
		timeScale:vel
	);
	
	filterDecay = EnvGen.ar(
		Env.perc(0, filterDecay, curve:filterDecay),
		gate:trig,
		levelScale:vel,
		timeScale:vel
	);
	
	vco1EnvAmt = 2.pow(vco1EnvAmt * vcoDecay);
	vco1Freq = (vco1Freq * vco1EnvAmt);
	vco1Freq = vco1Freq.clip(1, SampleRate.ir/2-1);
	
	vco1Saw = SyncSaw.ar(vco1Freq, vco1Freq * syncSkew);
	vco1Pulse = vco1Saw > 0;
	vco1 = vco1Saw.blend(vco1Pulse, vco1Mix);
	
	vco2EnvAmt = 2.pow(vco2EnvAmt * vcoDecay);
	vco2Freq = vco2Freq * vco2EnvAmt;
	vco2Freq = vco2Freq * 2.pow(vco1 * fmAmt);
	vco2Freq = vco2Freq.clip(1, SampleRate.ir/2-1);
	
	vco2Saw = SyncSaw.ar((vco2Sync > 0).if(vco1Freq, vco2Freq), vco2Freq * syncSkew);
	vco2Pulse = vco2Saw > 0;
	vco2 = vco2Saw.blend(vco2Pulse, vco2Mix);
	
	noise = WhiteNoise.ar;
	
	sig = (vco1Level * vco1)
	+ (vco2Level * vco2)
	+ (noiseLevel * noise);
	sig = LeakDC.ar(sig);
	
	filterNoise = 2.pow(LPF.ar(filterNoise * noise, 9500));
	
	filterMod = 2.pow(filterModAmt * filterDecay);
	filterFreq = filterFreq * filterMod;
	filterFreq = filterFreq * filterNoise;
	filterFreq = filterFreq.clip(10, SampleRate.ir / 2 - 1);
	
	sig = MoogFF.ar(sig, filterFreq, filterRes);
	sig = SoftClipAmp8.ar(sig, overdrive);
	
	sig = amp * sig;
	sig = Compander.ar(sig, sig, (amp.ampdb - 3).dbamp, 1, 1/40);
	
	// sig = sig + LeakDC.ar(
	// 	(-16.dbamp * Pluck.ar(hisig, hisig, 1, (102 + [0, 3.1, 7.0]).midicps.reciprocal, 0.6, 0.05).sum)
	// );
	
	[sig, trig]
});

//Ndef(\postProc).clear
Ndef(\postProc, {
	var sig, hisig, trig;
	
	#sig, trig = Ndef(\dfam).ar(2);

	hisig = LeakDC.ar(BHiPass4.ar(sig, 500));
	
	sig = sig + (-20.dbamp * CombC.ar(sig, 8, 1.5 * Timer.ar(trig).min(4).max(0).lag(0.1), 3));
	
	sig = sig + (-22.dbamp * JPverb.ar(
		hisig,
		1.1,
		0.2,
		0.2,
		earlyDiff: 0.9
	));
}).play;

)

(
Pdef(\dfamDefault, Pbind(*Ndef(\dfam).controlNames.collect({arg ctrl; [ctrl.name, ctrl.defaultValue]}).flatten));
Pdef(\dfam, Pbind(
	\type, \set,
	\args, Ndef(\dfam).controlNames.collect({arg ctrl;ctrl.name}),
	\id, Pfunc({ Ndef(\dfam).group.nodeID }),
	\trig, Pkey(\velocity, inf) / 128,
));
)

(
Pdef(\dfam_play, Ppar([
	Pbind(
		\durMult,		 	Prand((1 ! 16) ++ [2, 3, 6, 4], inf),
		\dur,				Pkey(\durMult) * 0.125,
		\envAttack,         0.001,
		\envCurve,         -4.0,
		\velocity, 			Prand([ 0.5, 0.5, 0.75, 0.8, 1], inf),
		\envDecay,          Pkey(\durMult).pow(2) * Prand(0.125 * [1, 3, 3, 3, 6, 10, 20], inf),
		\fadeTime,          0.0,
		\filterDecay,       Pkey(\durMult) * 0.1,
		\filterFreq,    	Pfunc({ exprand(60, 19000) }),
		\filterModAmt,      Prand([-2, -2, -2, 2], inf),
		\filterNoise,       0.1,
		\filterRes,         0.2,
		\fmAmt,             Prand([0, 0, 0, 1, 2], inf),
		\noiseLevel,        Pseq([-40, -32, -24, 0], inf),
		\overdrive,         Penv([-10, 6, -10], [16, 16]).repeat,
		\vco1EnvAmt,        Prand([1.25, 2, 0.5, -4, -6], inf),
		\vco1Freq,         	Prand([
								Pfuncn({ rrand(30, 60) }, 15), 
								700		
							], inf).trace,
		\vco1Level,        -0,
		\vco1Mix,           Pfunc({ rrand(0.2, 0.9) }),
		\vco2EnvAmt,        1,
		\vco2Freq,         	Prand([30, 60, 10, 20], inf),
		\vco2Level,        -0,
		\vco2Mix,           0,
		\vco2Sync,          Prand([0, 0, 0, 0, 1], inf),
		\vcoDecay,          Prand([0.1, 0.2, 0.1, 0.93, 2], inf),
		\vcoDecayCurve,     Pfunc({ rrand(-3, 3) })
	)
]) <> Pdef(\dfam)).play
)

* FrenchHorn
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-12-25 Tue 14:44
  :ARCHIVE_FILE: ~/Desktop/tc.org
  :ARCHIVE_CATEGORY: tc
  :END:
(
 SynthDef("frenchHorn",
	  {
	    arg out = 0, freq = 110, gate = 0, amp = 1.0, da = 2,hpf = 20,
	        attack = 0.2, decay = 8.0, sustain = 0.6, release = 0.6,
	        fattack = 0.2,fdecay = 8.0, fsustain = 0.8,frelease = 0.6,
	        aoc = 0.9,gain = 0.7, cutoff = 5200.00,
	        bend = 0, spread = 0, balance = 0;
	
	    var sig, fb1, op1, op2, op3, env, fenv,tmp;

	    env  = Env.adsr(attack,decay,sustain,release,curve: 'welch');
	    env = EnvGen.kr(env, gate: gate,doneAction:da);

	    fenv = Env.adsr(fattack,fdecay,fsustain,frelease,1,'sine');
	    fenv = EnvGen.kr(fenv, gate);
	    fenv = aoc*(fenv - 1) + 1;
	    
		op3 = SinOsc.ar(3*freq);
	    op2 = SinOsc.ar(1*freq);

		  //		tmp = MouseX.kr(0,2).poll;
	    fb1 = FbNode(1);
	    op1 = SinOsc.ar(freq,(op2*1.35) + fb1 + (0.0637501*op3));	  
		fb1.write(0.3* op1);	  	 
	    sig = env*op1;

		  
	    sig = RLPF.ar
	      (
	       sig,
	       cutoff*fenv,
	       gain
	       );
			  
	    sig = HPF.ar(sig,hpf);
		  
	    sig = FreeVerb.ar(sig,0.33); // fan out...
		  
	    sig = LeakDC.ar(sig);
		  
	    sig = Splay.ar(sig,spread,center:balance);

	    Out.ar(out,amp*sig);
		  
	  }).send(s);

 )


* Set Channel0
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-12-25 Tue 14:44
  :ARCHIVE_FILE: ~/Desktop/tc.org
  :ARCHIVE_CATEGORY: tc
  :END:
~channel0 = {arg num, vel = 1;
	var ret;
	num.postln;

	ret = Synth("frenchHorn");
	ret.set(\freq,num.midicps);
	ret.set(\gate,1);

	ret;
};


* Old OSC Code
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-12-25 Tue 16:16
  :ARCHIVE_FILE: ~/Desktop/tc.org
  :ARCHIVE_OLPATH: setUp evenVCO/SynthDef
  :ARCHIVE_CATEGORY: tc
  :END:

//		sig = Osc.ar(ss,freq,[0,0.1,0.2],mul: EnvGen.kr(env, gate: gate, doneAction:da)) * amp;

//    freq = Lag.kr(freq,lagt);
//    freq = { freq * LFNoise2.kr(1,0.002,1) }!2; 

    sig = Osc.ar(ss,freq,[0,0.1,0.2],mul: EnvGen.kr(env, gate: gate, doneAction:da)) * amp;

	// freq = SinOsc.ar(0.5*freq)*2 + freq;

	//      sig  = Pulse.ar(freq, 0.97, mul: EnvGen.kr(env, gate: gate, doneAction:da))  * amp;
    // sig  = Pulse.ar(freq, MouseX.kr(0.5,0.99), mul: EnvGen.kr(env, gate: gate, doneAction:da))  * amp;
       
    sig = MoogFF.ar
      (
       sig,
       cutoff*fenv,
       gain
       );

    sig = Splay.ar(sig);
 
    Out.ar(out,sig);
	 
  }).store;


* File Directory Dirt tidalCycles
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-12-27 Thu 17:03
  :ARCHIVE_FILE: ~/workspace/cleanLead/cleanLead.org
  :ARCHIVE_CATEGORY: cleanLead
  :END:
*/
/home/dbalchen/.local/share/SuperCollider/downloaded-quarks/Dirt-Samples
/*
** SuperDirt
*/
   include("SuperDirt")
   SuperDirt.start
   Doesnt work


/*

* Wavetables
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-01-27 Sun 15:06
  :ARCHIVE_FILE: ~/Music/song7/song7.org
  :ARCHIVE_OLPATH: evenVCO
  :ARCHIVE_CATEGORY: song7
  :END:
** Pulse wave like

~even0  = ~makeWav.value("/home/dbalchen/Music/Samples/wavetables/AKWF_0002/AKWF_0197.wav");

** Organ Hammond Darker 
~even0  = ~makeWav.value("/home/dbalchen/Music/Samples/wavetables/AKWF_0004/AKWF_0367.wav");

** +++Church Clean
~even0  = ~makeWav.value("/home/dbalchen/Music/Samples/wavetables/AKWF_0005/AKWF_0488.wav");

** Dark Synth
~even0  = ~makeWav.value("/home/dbalchen/Music/Samples/wavetables/AKWF_0010/AKWF_0908.wav");

** Good for lead
~even0  = ~makeWav.value("/home/dbalchen/Music/Samples/wavetables/AKWF_0013/AKWF_1289.wav");

** I Don't know

~even0  = ~makeWav.value("/home/dbalchen/Music/Samples/wavetables/AKWF_0013/AKWF_1296.wav");

** ++++EvenVco
~even0  = ~makeWav.value("/home/dbalchen/Desktop/even2.wav");


*/

/*

* mosc
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-04-14 Sun 19:09
  :ARCHIVE_FILE: ~/Music/song7/song7.org
  :ARCHIVE_OLPATH: SuperCollider/[[file:include/synths/evenVCO.sc][evenVCO]]
  :ARCHIVE_CATEGORY: song7
  :END:
*/

~even0  = ~makeWav.value("/home/dbalchen/Music/song7/include/samples/07-EVCO.wav");
~even0  = ~makeWav.value("/home/dbalchen/Desktop/SoloCello.wav");


SynthDef("mosc", {
arg ss, freq = 55, out = 0, amp = 0.5, lagt = 0, da = 2, gate = 0,
	attack = 1.5, decay = 2.5, sustain = 0.4, release = 0.75,
	fattack = 1.5, fdecay = 2.5,fsustain = 0.4, frelease = 0.5,
     aoc = 0,
      gain = 0.5, cutoff = 8000.00,
      spread = 1, balance = 0, hpf = 0;

    var sig, env, fenv;

    env = Env.adsr(attack,decay,sustain,release);
    env = EnvGen.kr(env, gate: gate, doneAction:da);

    fenv = Env.adsr(fattack,fdecay,fsustain,frelease);
    fenv = EnvGen.kr(fenv, gate,doneAction:da);
    fenv = aoc*(fenv - 1) + 1;

    freq = Lag.kr(freq,lagt);
	//    freq = {freq * LFNoise2.kr(1.5,0.003,1)}!3;

    sig = Osc.ar(ss,freq,0,mul:env*amp);

    sig = MoogFF.ar
      (
       sig,
       cutoff*fenv,
       gain
       );

    sig = HPF.ar(sig,hpf);
	
    sig = LeakDC.ar(sig);
	
    sig = Splay.ar(sig,spread,center:balance);

    Out.ar(out,sig * amp);

  }).send(s);

/*
** Setup midi channel mosc
*/
~channel0 = {arg num, vel = 1;
	     var ret;
	     num.postln;
	     ret = Synth("mosc");
	     ret.set(\ss,~even0);
	     ret.set(\freq,num.midicps);
	     ret.set(\gate,1);
	     ret;
};

/*


* voscMono
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-05-09 Thu 07:50
  :ARCHIVE_FILE: ~/Music/song7/song7.org
  :ARCHIVE_OLPATH: SuperCollider
  :ARCHIVE_CATEGORY: song7
  :END:

*/


"/home/dbalchen/workspace/SuperCollider/makeWaveTable.sc".load;
"/home/dbalchen/Music/song7/include/synths/envelopes.sc".load;

SynthDef("voscMono", {
    arg ss, freq = 55, out = 0, amp = 0.45, lagtime = 0, idx = 0.25,
      vcaIn = 9999, vcfIn = 9999,gate = 0,bend = 0,
      aoc = 1, gain = 0.7, cutoff = 15000,hpf = 128,
      spread = 1, balance = 0;

    var sig, env, fenv;

    fenv = In.kr(vcfIn);
    fenv = aoc*((fenv - 1) + 1);

    freq = Lag.kr(freq,lagtime);
    freq = {freq *  LFNoise2.kr(2.5,0.01,1)}!16;

    sig = VOsc.ar(ss + idx,freq,0);
	
    sig = MoogFF.ar
      (
       sig,
       cutoff*fenv,
       gain
       );
	
    sig = sig*((In.kr(vcaIn) - 1) + 1);

    sig = HPF.ar(sig,hpf);
	
    sig = LeakDC.ar(sig);

    sig = Splay.ar(sig,spread,center:balance);

    Out.ar(out,sig * amp);

  }).send(s);

/*
** voscMono midi setup
*/

~wavetables.free;
~wavetables = ~fileList.value("/home/dbalchen/Music/song7/include/samples/evenVCO");
~windex = ~wavetables.size;

~wavebuff = ~loadWaveTables.value(~wavetables);



~voscMono = Synth("voscMono",addAction: \addToTail);
~voscMono.set(\cutoff,10038);
~voscMono.set(\hpf,220);
~voscMono.set(\aoc,0.6);
~voscMono.set(\ss,~wavebuff);
~voscMono.set(\windex, ~windex);
~voscMono.set(\idx,0.6);
~voscMono.set(\lagtime, 0.2);


~voscMono_vca_control_in = Bus.control(s, 1);
~voscMono_vcf_control_in = Bus.control(s, 1);

~voscMono.set(\vcfIn,~voscMono_vcf_control_in);
~voscMono.set(\vcaIn,~voscMono_vca_control_in);

~voscMono_vca_envelope = MyADSR.new;
~voscMono_vca_envelope.init;
~voscMono_vca_envelope.attack = 1.5;
~voscMono_vca_envelope.decay = 2.5;
~voscMono_vca_envelope.sustain = 0.4;
~voscMono_vca_envelope.release = 0.75;

~voscMono_vcf_envelope = MyADSR.new;
~voscMono_vcf_envelope.init;
~voscMono_vcf_envelope.attack = 1.5;
~voscMono_vcf_envelope.decay = 2.5;
~voscMono_vcf_envelope.sustain = 0.4;
~voscMono_vcf_envelope.release = 0.75;


SynthDef(\voscmono, {arg num = 60,gate = 1;
    var env = Env.asr(0,1,0);
    var trig = EnvGen.kr(env, gate,doneAction:2);
    SendReply.kr(trig, '/voscmono', num);
  }).add;

OSCdef(\voscmono, { |m|

      var num = m[3].asInteger;

    ~voscMono.set(\freq,num.midicps);
	
    ~voscMono.set(\release,~voscMono_vca_envelope.release);
	
    ~voscMono_fenv = Synth("myADSRk",addAction: \addToHead);
    ~voscMono_fenv.set(\out,~voscMono_vcf_control_in);
	
    ~voscMono_vcf_envelope.setADSR(~voscMono_fenv);

    ~voscMono_env  = Synth("myADSRk",addAction: \addToHead);
    ~voscMono_env.set(\out,~voscMono_vca_control_in);
    ~voscMono_vca_envelope.setADSR(~voscMono_env);

    ~voscMono_env.set(\gate,1);
    ~voscMono_fenv.set(\gate,1);
    ~voscMono.set(\gate,1);


  }, '/voscmono');



~channel0 = {arg num, vel = 1;
	     var ret,tdx;
	     num.postln;
	     tdx = (~wavetables.size/120)* num;
	     ret = Synth("voscmono");
	     ret.set(\num,num);
	     ~voscMono.set(\idx,tdx);

	
	     ret.set(\gate,1);


	

	     ret;
};

~channel0off = {arg num, vel = 1;
		var ret = nil,tdx = 0;

		~voscMono_env.set(\gate,0);
		~voscMono_fenv.set(\gate,0);
		//		~voscMono.set(\gate,0);
};



~channel0 = {arg num, vel = 1;
	     var ret,tidx;

	     tidx = (~wavetables.size/120)* num;
	     ~voscMono.set(\freq,num.midicps);
	     ~voscMono.set(\idx,tidx);
	
	     ~voscMono_fenv = Synth("myADSRk",addAction: \addToHead);
	     ~voscMono_fenv.set(\out,~voscMono_vcf_control_in);
	     ~voscMono_vcf_envelope.setADSR(~voscMono_fenv);

	     ~voscMono_env  = Synth("myADSRk",addAction: \addToHead);
	     ~voscMono_env.set(\out,~voscMono_vca_control_in);
	     ~voscMono_vca_envelope.setADSR(~voscMono_env);

	     ~voscMono_env.set(\gate,1);
	     ~voscMono_fenv.set(\gate,1);
	     ~voscMono.set(\gate,1);

};

/*

* moscMono
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-05-09 Thu 07:52
  :ARCHIVE_FILE: ~/Music/song7/song7.org
  :ARCHIVE_OLPATH: SuperCollider
  :ARCHIVE_CATEGORY: song7
  :END:
*/

SynthDef(\moscMono, {arg ss, 
      freq = 110, out = 0, amp = 0.5, aoc = 1.0,
      vcfIn = 999, vcaIn = 999,cutoff = 15000, gain = 0.7,
      release = 0.3, bend =0,hpf = 120, mul = 1,
      lagtime = 0, spread = 1, balance = 0, gate = 0;

    var sig,fenv, env;

    release = release - 0.019;
	
    env = Env.new([0,0,1,0],[0.000001,0,release],0,2);
    env = EnvGen.kr(env, gate);

    fenv = In.kr(vcfIn);
    fenv = aoc*((fenv - 1) + 1);

    freq = Lag.kr(freq,lagtime);
    freq = {freq * bend.midiratio * LFNoise2.kr(2.5,0.01,1)}!4;

    sig = Osc.ar(ss,freq,0,mul:env*amp);

    sig = BLowPass.ar
      (
       
       sig,
       cutoff*fenv,
       gain
       
       );

    sig = sig*((In.kr(vcaIn) - 1) + 1);

    sig = LeakDC.ar(sig);

    sig = HPF.ar(sig,hpf);

    sig = Splay.ar(sig,spread,center:balance);
    
    Out.ar(out,amp*sig*env);
  }
  ).send(s);

/*
*** Setup midi for moscMono
*/

~moscMono = Synth("moscMono",addAction: \addToTail);
~moscMono.set(\ss,~even0);
~moscMono.set(\lagtime,0.2);

~moscMono_vca_control_in = Bus.control(s, 1);
~moscMono_vcf_control_in = Bus.control(s, 1);

~moscMono.set(\vcfIn,~moscMono_vcf_control_in);
~moscMono.set(\vcaIn,~moscMono_vca_control_in);

~moscMono_vca_envelope = MyADSR.new;
~moscMono_vca_envelope.init;
~moscMono_vca_envelope.attack = 0.5;
~moscMono_vca_envelope.decay = 1.5;
~moscMono_vca_envelope.sustain = 0.7;
~moscMono_vca_envelope.release = 0.2;

~moscMono_vcf_envelope = MyADSR.new;
~moscMono_vcf_envelope.init;
~moscMono_vcf_envelope.attack = 0.5;
~moscMono_vcf_envelope.decay = 2.5;
~moscMono_vcf_envelope.sustain = 0.7;
~moscMono_vcf_envelope.release = 0.4;



/*

  ~moscMono_vca_envelope.gui;
  ~moscMono_vcf_envelope;
  ~moscMono_vca_envelope;

*/



SynthDef(\mMosc, {arg num = 60,gate = 1;
    var env = Env.asr(0,1,0);
    var trig = EnvGen.kr(env, gate,doneAction:2);
    SendReply.kr(trig, '/mMosc', num);
  }).add;

OSCdef(\mMosc, { |m|

      var num = m[3].asInteger;

    ~moscMono.set(\freq,num.midicps);
    ~moscMono.set(\release,~moscMono_vca_envelope.release);

    ~moscMono_fenv = Synth("myADSRk",addAction: \addToHead);
    ~moscMono_fenv.set(\out,~moscMono_vcf_control_in);
    ~moscMono_vcf_envelope.setADSR(~moscMono_fenv);
	
    ~moscMono_env  = Synth("myADSRk",addAction: \addToHead);
    ~moscMono_vca_envelope.setADSR(~moscMono_env);
    ~moscMono_env.set(\out,~moscMono_vca_control_in);

    ~moscMono_env.set(\gate,1);
    ~moscMono_fenv.set(\gate,1);
    ~moscMono.set(\gate,1);


  }, '/mMosc');

~channel0 = {arg num, vel = 1;
	     var ret;
	     num.postln;

	     ret = Synth("mMosc");
	     ret.set(\num,num);
	     ret.set(\gate,1);

	     ret;
};

~channel0off = {arg num, vel = 1;
		var ret = nil;

		~moscMono_env.set(\gate,0);
		~moscMono_fenv.set(\gate,0);
		~moscMono.set(\gate,0);
		ret;
};



/*

* Carriers and Modulators
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-06-09 Sun 09:47
  :ARCHIVE_FILE: ~/Music/song7/song7.org
  :ARCHIVE_OLPATH: SuperCollider/FM
  :ARCHIVE_CATEGORY: song7
  :END:
    Dividing the "fm" synth def into two pieces, a synthdef for a modulator and a 
    synthdef for the carrier, gives more functionality - carrier signals can shaped by two 
    or more modulators.

*/



(

 SynthDef("carrier", { arg inbus = 2, outbus = 0, freq = 440, carPartial = 1, mul = 0.2,
       attack = 0, decay = 0, sustain = 1, release = 0, da = 2;

     var mod,car,env;

     env  = Env.adsr(attack,decay,sustain,release,curve: 'welch');
     
     env = EnvGen.ar(env, gate: gate,doneAction:da);

     mod = In.ar(inbus, 1);

     Out.ar(

	    outbus,

	    SinOsc.ar((freq * carPartial) + mod, 0, mul*env);

	    )

       }).load(s);



 SynthDef("modulator", { arg outbus = 2, freq, modPartial = 1, index = 3,
       attack = 0, decay = 0, sustain = 1, release = 0, da = 2;

     var env;

     env  = Env.adsr(attack,decay,sustain,release,curve: 'welch');
     
     env = EnvGen.ar(env, gate: gate,doneAction:da);

     
     Out.ar(

	    outbus,

	    SinOsc.ar(freq * modPartial, 0, freq) 

	    * 

	    LFNoise1.kr(Rand(3, 6).reciprocal).abs 

	    * 

	    index

	    )

       }).load(s);

)



(

var freq = 440;

// modulators for the left channel

Synth.head(s, "modulator", [\outbus, 2, \freq, freq, \modPartial, 0.649, \index, 2]);

Synth.head(s, "modulator", [\outbus, 2, \freq, freq, \modPartial, 1.683, \index, 2.31]);



// modulators for the right channel

Synth.head(s, "modulator", [\outbus, 4, \freq, freq, \modPartial, 0.729, \index, 1.43]);

Synth.head(s, "modulator", [\outbus, 4, \freq, freq, \modPartial, 2.19, \index, 1.76]);



// left and right channel carriers

Synth.tail(s, "carrier", [\inbus, 2, \outbus, 0, \freq, freq, \carPartial, 1]);

Synth.tail(s, "carrier", [\inbus, 4, \outbus, 1, \freq, freq, \carPartial, 0.97]);

)



(

s.queryAllNodes;

)

*/
/*

* Read Midi file
   SCHEDULED: <2019-05-07 Tue>
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-06-22 Sat 22:31
  :ARCHIVE_FILE: ~/Music/song7/song7.org
  :ARCHIVE_OLPATH: SuperCollider
  :ARCHIVE_CATEGORY: song7
  :END:
 */
/* Sébastien Clara - Janvier 2016


   Import a midi file on 3 Arrays : notes, durations & dates


   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   Put or link this file in a specific directories
   Typical user-specific extension directories :
   OSX:	~/Library/Application Support/SuperCollider/Extensions/
   Linux: 	~/.local/share/SuperCollider/Extensions/

   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   Dependence : wslib on Quarks

   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   typeMidi => For noteOn & noteOff information.
   But with MuseScore, we don't have. So put typeMidi to 1.
   See the examples below.

*/

ImportMidiFile {
  *new {	arg file, typeMidi=0;

    var midiFile;
    var notes, durees, dates;
    var on, off, datesIndex;

    midiFile = SimpleMIDIFile.read(file);

    if (typeMidi == 0,{
	midiFile.noteEvents.do({ |i| if(i[2] == \noteOn,
	  {on = on.add(i)},
	  {off = off.add(i)})
	      });
      },{
	midiFile.noteEvents.do({ |i| if(i[5] != 0,
	  {on = on.add(i)},
	  {off = off.add(i)})
	      });
      });


    datesIndex = on.collect({|i| i[1]});

    datesIndex.asSet.asArray.sort.do({|date|
	  var indices;
	indices =  datesIndex.indicesOfEqual(date);

	notes = notes.add( indices.collect({|i| on[i][4]}) );

	durees = durees.add( indices.collect({|i|
		var offIndice, duree;
	      offIndice = off.collect({|j| j[4]}).detectIndex({|j| j == on[i][4]});
	      duree = off[offIndice][1] - on[i][1];
	      off.removeAt(offIndice);
	      duree;
	    }) );

	dates = dates.add( date );
      });



    ^[notes, durees, dates];
  }
}

/*
//////////////////////////////////////////////////////////////////////////
//	Usage :

m = SimpleMIDIFile.read("~/Desktop/bwv772.mid");
m.noteEvents.collect({ |i| i.postln }); ""
/*
[ 1, 97, noteOn, 0, 60, 127 ]
[ 1, 265, noteOff, 0, 60, 127 ]
[ 1, 278, noteOn, 2, 62, 127 ]
[ 1, 446, noteOff, 2, 62, 127 ]
*/
// => typeMidi by default

// notes, durations, dates <=
# n, d, t = ImportMidiFile("~/Desktop/bwv772.mid");

n
d
t


m = SimpleMIDIFile.read("~/Desktop/cadence.mid");
m.noteEvents.collect({ |i| i.postln }); ""
					/*
					  [ 0, 0, noteOn, 0, 72, 73 ]
					  [ 0, 479, noteOn, 0, 72, 0 ]
					  [ 0, 480, noteOn, 0, 69, 69 ]
					  [ 0, 959, noteOn, 0, 69, 0 ]
					*/
					// => typeMidi != 0 !!!!!!!!!!!!!!

					// notes, durations, dates <=
# n, d, t = ImportMidiFile("~/Desktop/cadence.mid", 1);

n
d
t

*/

* [[file:include/synths/mono_evenVCO.sc][Mono evenVCO]]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-06-22 Sat 22:31
  :ARCHIVE_FILE: ~/Music/song7/song7.org
  :ARCHIVE_OLPATH: SuperCollider
  :ARCHIVE_CATEGORY: song7
  :END:

* [[file:include/synths/mono_eCello.sc][Mono_eCello]]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-06-22 Sat 22:32
  :ARCHIVE_FILE: ~/Music/song7/song7.org
  :ARCHIVE_OLPATH: SuperCollider
  :ARCHIVE_CATEGORY: song7
  :END:


* Note Factory
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-07-13 Sat 09:17
  :ARCHIVE_FILE: ~/Music/song7/song7.org
  :ARCHIVE_OLPATH: Classes
  :ARCHIVE_CATEGORY: song7
  :END:

	       if(tonerow == nil,
		       {tonerow = [0,1,2,3,4,5,6,7,8,9,10,11];});

       createScale {

	       for(0,12,
		       { arg i;
			       tonerow.do({arg item, ii;

				       var point;

				       point = item + (i*12);

				       if((point >=0) && (point <= 120),{

					       scale = scale.add(point);

			       };)});
	       });
	       scale = scale.sort;
       }


       fixDurs {arg proby = probs;

	       proby.do({arg item, i;

		       var dur = 0, count = i+1;

		       if ((item != 0),{
			       dur = waits[i];
			       while({(proby[count] == 0) && (count < proby.size)},{
				       dur = dur + waits[count];
				       count = count + 1;
			       });

			       durations[i] = dur;
		       },
		       {
			       durations[i] = 0;
		       }

	       )});

	       durations.postln;
       }

