#+STARTUP: overview
#+OPTIONS: d:nil
#+OPTIONS: toc:nil
#+TAGS: Presentation(p)  noexport(n) Documentation(d) taskjuggler_project(t) taskjuggler_resource(r) 
#+DRAWERS: PICTURE CLOSET 
#+PROPERTY: allocate_ALL dev doc test
#+COLUMNS: %30ITEM(Task) %Effort %allocate %BLOCKER %ORDERED
#+STARTUP: hidestars hideblocks 
#+LaTeX_CLASS_OPTIONS: [12pt,twoside]
#+LATEX_HEADER: \usepackage{lscape} 
#+LATEX_HEADER: \usepackage{fancyhdr} 
#+LATEX_HEADER: \usepackage{multirow}
#+LATEX_HEADER: \usepackage{multicol}
#+BEGIN_LaTeX
\pagenumbering{}
#+END_LaTeX 
#+TITLE: Usage Utilities
#+BEGIN_LaTeX
\newpage
\clearpage
%\addtolength{\oddsidemargin}{-.25in}
\addtolength{\oddsidemargin}{-.5in}
\addtolength{\evensidemargin}{-01.25in}
\addtolength{\textwidth}{1.4in}
\addtolength{\topmargin}{-1.25in}
\addtolength{\textheight}{2.45in}
\setcounter{tocdepth}{3}
\vspace*{1cm} 
% \newpage
\pagenumbering{roman}
\setcounter{tocdepth}{3}
\pagestyle{fancy}
\fancyhf[ROF,LEF]{\bf\thepage}
\fancyhf[C]{}
#+END_LaTeX
#+TOC: headlines 2
#+BEGIN_LaTeX
\newpage
\pagenumbering{arabic}
#+END_LaTeX
:CLOSET:
: Hours #+PROPERTY: Effort_ALL 0.125 0.25 0.375 0.50 0.625 .75  0.875 1
: Days  #+PROPERTY: Effort_ALL 1.00 2.00 3.00 4.00 5.00 6.00 7.00 8.00 9.00
: weeks #+PROPERTY: Effort_ALL 5.00 10.00 15.00 20.00 25.00 30.00 35.00 40.00 45.00
 : Add a Picture
 :   #+ATTR_LaTeX: width=13cm
 :   [[file:example_picture.png]]

 : New Page
 : \newpage
:END:
* Usage Utilities [%]
  SCHEDULED:
  - [ ] Documentation
  - [ ] Code
  - [ ] Test 
  - [ ] Deploy
** Introduction
   Contains the documentation for the *Usage Utilities* project.
** Project Scope
   To provide a repository that contains utilities that can be used for investigating and reporting on usage activities.
   Applications can produce output in various formats for both investigative and reporting purposes.
** Assumptions
   The applications should be close as posible to the input data. For example you should find these programs both on the operational server /kpr01oprmn/ and the CallDump /kpr01scd01/
** User Requirements
   - The programs should follow the standard unix philosophy
     1. Write programs that do one thing and do it well.
     2. Write programs to work together.
     3. Write programs to handle text streams, because that is a universal interface.

* Process Decomposition
** Data
   See Data section for the SQL code
*** 3G data by Volume
       : cat  AllData.csv  | egrep '3G|2G' | cut -f 1,3 | more
**** Home
       - *POST*  
       : cat  AllData.csv  | egrep '3G|2G' | grep POST | grep N | cut -f 1,3 | more
       - *PRE*
       : cat  AllData.csv  | egrep '3G|2G' | grep PRE  | grep N | cut -f 1,3 | more

**** Roam
       - *POST*  
       : cat  AllData.csv  | egrep '3G|2G' | grep POST | grep Y | cut -f 1,3 | more
       - *PRE*
       : cat  AllData.csv  | egrep '3G|2G' | grep PRE  | grep Y | cut -f 1,3 | more
**** Incollect
**** Outcollect
*** 4G
       : cat  AllData.csv  | egrep '4G' | cut -f 1,3 | more
**** Home
       - *POST*  
       : cat  AllData.csv  | egrep '4G' | grep POST | cut -f 1,3 | more
       - *PRE*
       : cat  AllData.csv  | egrep '4G' | grep PRE | cut -f 1,3 | more
**** Roam
       - *POST*  
       : cat  AllData.csv  | egrep '4G' | grep POST | grep Y | cut -f 1,3 | more
       - *PRE*
       : cat  AllData.csv  | egrep '4G' | grep PRE  | grep Y | cut -f 1,3 | more
**** Incollect
**** Outcollect
** Voice
** SMS
** Picture Messaging
** Premium SMS
** Intercarrier Roaming

* Executable
** /Program Name/
    - *Language:*
    - *Source Code Location:*
    - *Parameters:* /input and output/
    - *Description:*


** /statPlot.py/
    - *Language:* Python
    - [[file:~/workspace/usageUtlities/src/statPlot.py][*Source Code*]]
    - *Parameters:* Read from standard in a tab delimited record where the first field is the X-Axis and the remaining fields are function values of X
    - *Description:* Reads a tab delimeted file which contains a columnar set of function values to be graphed.

** /analysis.py/
    - *Language:* Python
    - [[file:~/workspace/usageUtlities/src/analysis.py][*Source Code*]]
    - *Parameters:* Reads Tab delimited records where the first field represents the X-Axis and the 2nd represents the Y-Axis\\
                    The output is the basic descriptive statistics plus the result of functions performed on the input data.
    - *Description:* Reads in Tab delimited data and does some statistical analysis then outputs the results. 

** /Usage.pl/
    - *Language:* Perl
    - [[file:~/workspace/usageUtlities/src/usage_finder.pl][*Source Code*]]
    - *Parameters:* MDN
    - *Description:*\\
      The program takes an *MDN* finds the customer, subscriber and all acumulated usage and displays it in an informative way.

* Data Decomposition
   - *Table/Field Name:*
   - *Purpose of File/Table:*
   - *Type of Change:* /create new or modify existing/
   - *Description of Change:* /or reason for adding/
   - *Primary Keys and Indices:*
   - *Estimated Rows and Growth Rate:*
|-------------------+------+--------+-------------|
| Column/Field Name | Type | Values | Description |
|-------------------+------+--------+-------------|
|                   |      |        |             |
|-------------------+------+--------+-------------|

** SQL
*** [[file:~/workspace/usageUtlities/lib/data.sql][Data]]
*** [[file:~/workspace/usageUtlities/lib/voice.sql][Voice]]
*** [[file:~/workspace/usageUtlities/lib/sms.sql][SMS]] 
*** Picture Messaging
   :   Select /*+ Parallel (T1,16) */
   :         To_Char (Trunc (T1.Sys_Creation_Date), 'Yyyymmdd') "Date",
   :          Count (*)                     "Records",
   :          Round (Sum (T1.L3_Duration), 8) "Minutes Of Use",
   :          'Cdma Voice'                  "Volume Type",
   :          T1.Event_Type_Id              "Event Type",
   :          T1.L3_Payment_Category        "Payment Category",
   :          T1.L9_Nt_Roaming_Ind          "Roaming Indicator"
   :     From Ape1_Rated_Event T1
   :    Where     Trunc (T1.Sys_Creation_Date) Between Trunc (Sysdate - 90)
   :                                               And Trunc (Sysdate - 1)
   :          And Event_Type_Id = 60
   : Group By To_Char (Trunc (T1.Sys_Creation_Date), 'Yyyymmdd'),
   :          T1.L9_Volume_Type,
   :          T1.Event_Type_Id,
   :          T1.L3_Payment_Category,
   :          T1.L9_Nt_Roaming_Ind
   : Order By To_Char (Trunc (T1.Sys_Creation_Date), 'Yyyymmdd'),
   :          T1.L9_Volume_Type,
   :          T1.Event_Type_Id,
   :          T1.L3_Payment_Category,
   :          T1.L9_Nt_Roaming_Ind Asc
* Infrastructure Considerations
  These programs are designed to run on a LINUX environment.
* Testing Approach
  Test each program individually.
* Implementation Considerations
  See *Infrastructure Considerations*.
* Task List [80%]
  - [X] Create Initial SQL
  - [X] Push Through Analysis
  - [X] Write plot program
  - [-] Come up with other SQL for other types [66%]
    - [X] Voice
    - [X] Data
    - [X] SMS
    - [X] Picture Messaging
    - [ ] Premium SMS
    - [ ] Intercarrier Roaming
  - [X] Analyze Analyse [100%]
    - [X] Write out describe statistics in analyse.py
    - [X] Save Header
    - [X] print out fenses
    - [X] Move each function to it's own sub routine
    - [X] output only one function at a time
      - [X] Pass command line arguments
* Git/GitHub/Documentation Standards and other musings 	       :Presentation:
** Introduction
*** Overview of the Meeting
    - Directory Structure
    - Project Documentation
    - Git and Git Hub
** Project Overview
   A repository that contains utilities that can be used for investigation and report on usage activities. 
*** Directory Structure
    - The root directory is the *Project* name and may contain the following sub-directory's
      - *bin*
      - *src*
      - *lib*
      - *data*
      - *doc*
** Project Documentation
*** Project Documentation Structure
    : #+TITLE: Usage Utilities
    : * Usage Utilities [%]
    :   SCHEDULED:
    :   - [ ] Documentation
    :   - [ ] Code
    :   - [ ] Test 
    :   - [ ] Deploy
    :   
    : ** Introduction
    : 
    : ** Project Scope
    : 
    : ** Assumptions
    : 
    : ** User Requirements
    : 
    : * Process Decomposition
    : 
    : * Executable
    : ** /Program Name/
    :     - *Language:*
    :     - *Source Code Location:*
    :     - *Parameters:* /input and output/
    :     - *Description:*
    : 
    : * Data Decomposition
    :    - *Table/Field Name:*
    :    - *Purpose of File/Table:*
    :    - *Type of Change:* /create new or modify existing/
    :    - *Description of Change:* /or reason for adding/
    :    - *Primary Keys and Indices:*
    :    - *Estimated Rows and Growth Rate:*
    : |-------------------+------+--------+-------------|
    : | Column/Field Name | Type | Values | Description |
    : |-------------------+------+--------+-------------|
    : |                   |      |        |             |
    : |-------------------+------+--------+-------------|
    : 
    : * Infrastructure Considerations
    : 
    : * Testing Approach
    : 
    : * Implementation Considerations
**** [[https://orgmode.org/worg/org-tutorials/org4beginners.html][ORG Mode]]
**** [[https://www.markdownguide.org/cheat-sheet/][Markdown CheatSheet]] 
** GIT/GITHUB
   - *GIT* is a *Source Control Management System* that manages differences within a file. They are sometimes also called VCS (Version Control System)
   - *GITHUB* is a web frontend for *GIT*

   All version control systems provide the following functionality.
   1. A complete long-term change history of every file.
   2. Branching and merging
   3. Traceability

*** GitHub Walkthrough
    1. Login
    2. Create a new Repository

*** [[https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html][Basic GIT Commands]]
** Discussion
