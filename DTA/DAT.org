#+STARTUP: overview
#+OPTIONS: d:nil
#+OPTIONS: toc:nil
#+TAGS: Presentation(p)  noexport(n) Documentation(d) taskjuggler_project(t) taskjuggler_resource(r) 
#+DRAWERS: PICTURE CLOSET 
#+PROPERTY: allocate_ALL dev doc test
#+COLUMNS: %30ITEM(Task) %Effort %allocate %BLOCKER %ORDERED
#+STARTUP: hidestars hideblocks 
#+LaTeX_CLASS_OPTIONS: [12pt,twoside]
#+LATEX_HEADER: \usepackage{lscape} 
#+LATEX_HEADER: \usepackage{fancyhdr} 
#+LATEX_HEADER: \usepackage{multirow}
#+LATEX_HEADER: \usepackage{multicol}
#+BEGIN_EXPORT latex
\pagenumbering{}

\pdfstringdefDisableCommands{%
  \def\alpha{alpha}%
  \def\({}%
  \def\){}%
  \def\texttt#1{<#1>}%
}
#+END_EXPORT 
#+TITLE: Project Cumberland
#+BEGIN_EXPORT latex
\newpage
\clearpage
%\addtolength{\oddsidemargin}{-.25in}
\addtolength{\oddsidemargin}{-.5in}
\addtolength{\evensidemargin}{-01.25in}
\addtolength{\textwidth}{1.4in}
\addtolength{\topmargin}{-1.25in}
\addtolength{\textheight}{2.45in}
\setcounter{tocdepth}{3}
\vspace*{1cm} 
% \newpage
\pagenumbering{roman}
\setcounter{tocdepth}{3}
\pagestyle{fancy}
\fancyhf[ROF,LEF]{\bf\thepage}
\fancyhf[C]{}
#+END_EXPORT
#+TOC: headlines 2

#+BEGIN_EXPORT latex
\newpage
\pagenumbering{arabic}
#+END_EXPORT
:CLOSET:
: Hours #+PROPERTY: Effort_ALL 0.125 0.25 0.375 0.50 0.625 .75  0.875 1
: Days  #+PROPERTY: Effort_ALL 1.00 2.00 3.00 4.00 5.00 6.00 7.00 8.00 9.00
: weeks #+PROPERTY: Effort_ALL 5.00 10.00 15.00 20.00 25.00 30.00 35.00 40.00 45.00
 : Add a Picture
 :   #+ATTR_LaTeX: width=13cm
 :   [[file:example_picture.png]]

 : New Page
 : \newpage
:END:
* Diameter 
  *Diameter* is an authentication, authorization, and accounting *(AAA)* protocol for computer networks. It evolved from the earlier *RADIUS* protocol.
  It belongs to the application layer protocols in the internet protocol suite. *Diameter Applications* extend the base protocol by adding new commands and/or attributes, 
  such as those for use with the Extensible Authentication Protocol (EAP).

** Diameter Credit Control (DCCA)
   Networking protocol for Diameter application used to implement *real-time credit-control* for a variety of end user services.
   It is an IETF standard first defined in *RFC 4006*, and updated in *RFC 8506*. The links below define the interface and the Amdocs implimentation of the interface:\\

   [[https://tools.ietf.org/html/rfc4006][DCAA Interface RFCC]]\\

   [[https://en.wikipedia.org/wiki/Diameter_Credit-Control_Application#:~:text=Diameter%2520Credit%252DControl%2520Application%252C%2520is,and%2520updated%2520in%2520RFC%25208506.][DCAA Overview]]\\

   [[file:Vision%20and%20Scope%20Accelerite%20Replacement_V02.docx][Amdocs DCCA Interface]]\\

   For real time reasons, the connection is a direct permanent socket-based connection between the /Diameter Client and Diameter Server (Amdocs OCS FR)/. 

** Transaction Table
   Transactions diameter must support

* MESSAGE DESCRIPTIONS
  A message starts with a *Diameter header* and an *AVP* as defined by *RFC 3588* according to type of message.

** Diameter Header
   Every *DCCA* message starts with a Diameter header. The header is 20 bytes long and includes the following fields:
   - Version – Diameter version (1 byte long) – 1
   - Message length – (3 bytes)
   - Command flags – (1 byte) indicators occupying eight bytes:
     - Request/answer
     - Proximal – NOT IN USE in this interface
     - Error – Message contains protocol error
     - Retransmit – Indicates POTENTIAL re-transmission
     - Reserved – NOT IN USE
   - Command code – (3 bytes)
   - Application ID – (4 bytes)
     - “0” for CER/DWR/DPR CEA/DWA/DPA
     - “4” for CCR/CCA message
   - Hop-by-hop identifier – The response must contain the same value that was received in the request.
   - End-to-End Identifier – (4 bytes) unsigned 32-bit integer
     - NOT IN USE by the server (OCS) for unique message ID
     -  This field is copied by the server into the Answer message Proprietary and Confidential Information of Amdocs

** Capabilities Exchange Request (CER)
   After establishing the connection at the TCP/IP level. The Diameter Client sends a *Capabilities Exchange Request (CER)* and waits for the *Capabilities Exchange Answer (CEA)*.
*** AVP Description

#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

    |---------------------+---------------------------------------------------------------------------------------------------------|
    | Diameter header     |                                                                                                         |
    | Host-IP-Address     | Used to inform a Diameter peer of the sender’s IP address.                                              |
    | Origin-Host         | Unique identifier of client instance (mandatory).                                                       |
    | Vendor-ID           | Zero value, required as CER mandatory attribute.                                                        |
    | Origin-Realm        | This AVP contains the Realm of the originator of any Diameter message.                                  |
    | Product-Name        | The Product-Name AVP should remain constant across firmware revisions for the same product.             |
    | Auth-Application-ID | Advertises support of the Authentication and Authorization portion of an application.                   |
    |                     | The Auth-Application-ID must be set to the value 4, indicating the Diameter credit-control application. |
    |---------------------+---------------------------------------------------------------------------------------------------------|

**** *Result-Code* 
   :    <CER> ::= < Diameter Header: 257, REQ >
   :    { Host-IP-Address }
   :    { Origin-Host }
   :    { Origin-Realm }
   :    { Product-Name }
   :    { Vendor-ID }
   :    [ Auth-Application-ID ]

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

#+BEGIN_EXPORT latex
\pagebreak
#+END_EXPORT

*** int cer_send(int client_sock)                                  :noexport:
#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT
     : 
     : int cer_send(int client_sock) {
     : 
     : 	DIAMETER_msg cer;
     : 
     : 
     : 	std::string LocalHost = "Localhost";
     : 
     : 	std::string LocalIPAddress = "192.168.0.1";
     : 
     : 	cer.setCode(DIAMETER_CAPABILITIES_EXCHANGE);
     : 	cer.setFlags(0x80);
     : 	cer.setHopHop(hop_to_hop++);
     : 	cer.setEndEnd(end_to_end++);
     : 
     : 	DIAMETER_avp avp1;
     : 	avp1.setCode(AVP_NAME_ORIGIN_HOST);
     : 	avp1.setValue(LocalHost.data());
     : 	cer.setAvp(avp1);
     : 
     : 	DIAMETER_avp avp2;
     : 	avp2.setCode(AVP_NAME_ORIGIN_REALM);
     : 	avp2.setValue("uscc.net");
     : 
     : 	cer.setAvp(avp2);
     : 
     : 	DIAMETER_avp avp3;
     : 	avp3.setCode(AVP_NAME_HOST_IP_ADDRESS);
     : 	avp3.setValue(LocalIPAddress.data());
     : 
     : 	cer.setAvp(avp3);
     : 
     : 	DIAMETER_avp avp4;
     : 	avp4.setCode(AVP_NAME_VENDOR_ID);
     : 	avp4.setValue(0);
     : 
     : 	cer.setAvp(avp4);
     : 
     : 	DIAMETER_avp avp5;
     : 	avp5.setCode(AVP_NAME_PRODUCT_NAME);
     : 	avp5.setValue("Amdocs DCCA");
     : 
     : 	cer.setAvp(avp5);
     : 
     : 	DIAMETER_avp avp6;
     : 	avp6.setCode(AVP_NAME_AUTH_APPLICATION_ID);
     : 	avp6.setValue(htonl(ccr_application_id));
     : 
     : 	cer.setAvp(avp6);
     : 
     : 	return (write_diameter(client_sock, cer));
     : }

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Capabilities Exchange Answer (CEA)
    The *Capabilities Exchange Answer (CEA)* is /Diameter Server’s/ response to the *CER*.
*** AVP Descriptions

#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

    |-----------------+----------------------------------------------------------------------------------------------------------------|
    | Diameter header |                                                                                                                |
    | Host-IP-Address | Used to inform a Diameter peer of the sender’s IP address.                                                     |
    | Origin-Host     | Unique identifier of server instance (mandatory). The Origin-Host is echoed on all types of message responses. |
    | Vendor-ID       | Value 11580 , required as CEA mandatory attribute.                                                             |
    | Origin-Realm    | Sent back by Diameter Server, required to be different from the value send by Diameter Client.                 |
    | Product-Name    | Sent back by Diameter Server, required to be different from the value sent by Diameter Client.                 |
    |                 | The Product-Name value responded to Diameter Client is ‘Amdocs DCCA’.                                          |
    |-----------------+----------------------------------------------------------------------------------------------------------------|

**** *Result-Code* 
   : Result-Code
   : <CEA> ::= < Diameter Header: 257, RES >
   : { Host-IP-Address }
   : { Origin-Host }
   : { Origin-Realm }
   : { Product-Name }
   : [ Auth-Application-ID ]
   : { Vendor-ID }
   : { Result-Code }

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Device Watchdog Request (DWR)
   *DWR* is the keep-alive message sent by Diameter Client.
*** AVP Descriptions

#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

    |-----------------+------------------------------------------------------------------------|
    | Diameter header |                                                                        |
    | Origin-Host     | Unique identifier of the client instance (mandatory).                  |
    | Origin-Realm    | This AVP contains the Realm of the originator of any Diameter message. |
    | Origin-State-Id | A monotonically increasing value that is advanced                      |
    |                 | whenever a Diameter entity restarts with loss of                       |
    |                 | previous state, for example upon reboot.                               |
    |-----------------+------------------------------------------------------------------------|

**** *Result-Code*
    : <DWR>::= < Diameter Header: 280, REQ >
    : { Origin-Host }
    : { Origin-Realm }
    : { Origin-State-Id }

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Device Watchdog Answer (DWA)
   *DWA* is Diameter Server’s response to the *DWR*.

*** AVP Descriptions
#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

    |-----------------+---------------------------------------------------------|
    | Diameter header |                                                         |
    | Origin-Host     | Unique identifier of the server instance (mandatory)    |
    |                 | Origin-Host is echoed on all types of message responses |
    | Origin-Realm    | Sent back by Diameter Server, required to be            |
    |                 | different from the value sent by the Diameter Client    |
    |-----------------+---------------------------------------------------------|

**** *Result-Code*
   : <DWA>::= < Diameter Header: 280, RES >
   : { Origin-Host }
   : { Origin-Realm }
   : { Result-Code }

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Disconnect Peer Request (DPR)
   This is the peer request to disconnect the transport connection.
*** AVP Descriptions
#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

    |------------------+-----------------------------------------------------------------------|
    | Diameter header  |                                                                       |
    | Origin-Host      | Unique identifier of the client instance (mandatory)                  |
    | Disconnect-Cause | Reason for disconnect                                                 |
    | Origin-Realm     | This AVP contains the Realm of the originator of any Diameter message |
    |------------------+-----------------------------------------------------------------------|

**** *Result-Code*
   : <DPR>::= < Diameter Header: 282, REQ >
   : { Origin-Host }
   : { Origin-Realm }
   : { Disconnect-Cause }
#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT
** Disconnect Peer Answer (DPA)
   This is the peer response to the *DPR*.

#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

   |-----------------+----------------------------------------------------------|
   | Diameter header |                                                          |
   | Origin-Host     | Unique identifier of server instance (mandatory).        |
   |                 | Origin-Host is echoed on all types of message responses. |
   | Origin-Realm    | Sent back by Diameter Server, required to be different   |
   |                 | from the value sent by the Diameter Client.              |
   |-----------------+----------------------------------------------------------|

**** *Result-Code*
   : <DPA>::= < Diameter Header: 282, RES >
   : { Origin-Host }
   : { Origin-Realm }
   : { Result-Code }

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Credit Control Messages
   - Credit control request/answer messages are used for all credit control events.
   - The following application events are in scope for this document:
     - CCR Direct Debit
     - CCR Authorization
     - CCR Terminate
     - CCR Refund
*** Message Reject Policy
#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

    |---------------------+------------------------------------------------------------------------------------------------------------|
    | *Unknown Message*   | If an unknown message type and/or unknown CC-Request-Type are sent from Diameter Client                    |
    |                     | to Diameter Server, Diameter Server will not continue to process the message.                              |
    |                     | Instead, Diameter Server will send a message reject response back with a result code value of              |
    |                     | DIAMETER_UNABLE_TO_COMPLY.                                                                                 |
    | *Unknown Attribute* | If an unknown attribute or incorrect optional attribute is sent to Diameter Server                         |
    |                     | from Diameter Client,Diameter Server will reject the request with the error code ‘Diameter-Rating-Failed’. |
    |---------------------+------------------------------------------------------------------------------------------------------------|
#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

*** CCR Authorization
    The CCR Authorization message results in OCS processing an authorize unit transaction. 
    The CCR request is implemented with CC-Request-Type = 1 (INITIAL_REQUEST)

#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

**** *Request Parameters*
   : <CCR> ::= < Diameter Header: 272, REQ >
   : < Session-Id>
   : { Origin-Host }
   : { Origin-Realm }
   : { Destination-Realm }
   : { Auth-Application-Id }
   : [ Content-Description ]
   : { CC-Request-Type }
   : { CC-Request-Number }
   : [ Destination-Host ]
   : [ Requested-Action ]
   : { Event-Timestamp }
   : *{ Subscription-ID }
   : { Subscription-ID-Type }
   : { Subscription-ID-Data }
   : { Service-Identifier }
   : *{ Requested-Service-Unit }
   :    *{ CC-Money }
   : 	  *{ Unit-Value }
   : 		{ Value-Digits }
   : 		{ Exponent }			
   : 		[ Currency-Code]
   : { Purchase-Category-Code }
   :                   { Application-Type }

**** *Response Parameters* 
   : <CCA> ::= < Diameter Header: 272,RES>
   : < Session-Id>
   : { Origin-Host }
   : { Origin-Realm }
   : { Auth-Application-ID }
   : { CC-Request-Number }
   : { CC-Request-Type }
   : { Result-Code }

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

*** CCR Terminate
    The CCR Terminate message results in OCS processing a charge unit transaction. 
    The CCR request is implemented with CC-Request-Type=3 (TERMINATION_REQUEST). We will distinguish whether client sent a Cancel (Cancel-event) or a Commit (Terminate event) using the Used-Service-Unit AVP.
    - The Used-Service-Unit AVP value of the Cancel (Cancel-event) request will be $0 and for Commit (Terminate-event), the value is greater than $0. 
#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT
**** *Request Parameters*
   : <CCR> ::= < Diameter Header: 272, REQ >
   : < Session-Id>
   : { Origin-Host }
   : { Origin-Realm }
   : { Destination-Realm }
   : { Auth-Application-Id }
   : [ Content-Description ]
   : { CC-Request-Type }
   : { CC-Request-Number }
   : [ Destination-Host ]
   : [ Requested-Action ]
   : { Event-Timestamp }
   : *{ Subscription-ID }
   : { Subscription-ID-Type }
   : { Subscription-ID-Data }
   : [ Termination-Cause ]
   : { Service-Identifier }
   : *{ Used-Service-Unit }
   : *{ CC-Money }
   : 	*{ Unit-Value }
   : 		{ Value-Digits }
   : 		{ Exponent }
   : 		[ Currency-Code]					
   : {Partner-Id}
   :          { Purchase-Category-Code }
   :          { Application-Type }

**** *Response Parameters* 
   : <CCA> ::= < Diameter Header: 272,RES>
   : < Session-Id>
   : { Origin-Host }
   : { Origin-Realm }
   : { Auth-Application-ID }
   : { CC-Request-Number }
   : { CC-Request-Type }
   : 	{ Result-Code }

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

*** CCR Refund	
    The CCR Refund message results in OCS processing a refund unit transaction. The CCR request is implemented with the *Requested-Action=REFUND_ACCOUNT* and *CC-Request-Type=4* /(EVENT_REQUEST)/.
#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT
**** *Request Parameters*
   : <CCR> ::= < Diameter Header: 272, REQ >
   : < Session-Id>
   : { Origin-Host }
   : { Origin-Realm }
   : { Destination-Realm }
   : { Auth-Application-Id }
   : [ Content-Description ]
   : { CC-Request-Type }
   : { CC-Request-Number }
   : [ Destination-Host ]
   : { Requested-Action }
   : { Event-Timestamp }
   : *{ Subscription-ID }
   : { Subscription-ID-Type }
   : { Subscription-ID-Data }
   : { Service-Identifier }
   : *{ Requested-Service-Unit }
   : *{ CC-Money }
   : 	*{ Unit-Value }
   : 		{ Value-Digits }
   : 		{ Exponent }
   : 		[ Currency-Code]				
   : {Partner-Id}
   :            { Purchase-Category-Code }
   :            { Application-Type }
   : { Adjustment-Reason-Code }

**** *Response Parameters* 
   : <CCA> ::= < Diameter Header: 272,RES>
   : < Session-Id>
   : { Origin-Host }
   : { Origin-Realm }
   : { Auth-Application-ID }
   : { CC-Request-Number }
   : { CC-Request-Type }
   : 	{ Result-Code }
#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

*** CCR Direct Debit
    The CCR Direct Debit message results in OCS processing a charge unit transaction. 
    The CCR request is implemented with the Requested-Action=DIRECT_DEBITING and CC-Request-Type=4 (EVENT_REQUEST).
#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT
**** *Request Parameters*
   : <CCR> ::= < Diameter Header: 272, REQ >
   : < Session-Id>
   : { Origin-Host }
   : { Origin-Realm }
   : { Destination-Realm }
   : { Auth-Application-Id }
   : [ Content-Description ]
   : { CC-Request-Type }
   : { CC-Request-Number }
   : [ Destination-Host ]
   : { Requested-Action }
   : { Event-Timestamp }
   : *{ Subscription-ID }
   : { Subscription-ID-Type }
   : { Subscription-ID-Data }
   : { Service-Identifier }
   : *{ Used-Service-Unit }
   : *{ CC-Money }
   : 	*{ Unit-Value }
   : 		{ Value-Digits }
   : 		{ Exponent }
   : 		[ Currency-Code]			
   : 		
   : {Partner-Id}
   :         { Purchase-Category-Code }
   :         { Application-Type }

**** *Response Parameters* 
   : <CCA> ::= < Diameter Header: 272,RES>
   : < Session-Id>
   : { Origin-Host }
   : { Origin-Realm }
   : { Auth-Application-ID }
   : { CC-Request-Number }
   : { CC-Request-Type }
   : 	{ Result-Code }
#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

* Client and Server Interaction                                    :noexport:
  Diameter Client is the initiator that establishes the connection to the server.

** Capabilities Exchange Answer (CEA)
   Each call from the client returns a Diameter message response that is describe in the below class.

*** Diameter Record Layout                                         :noexport:

#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

 : ////////////////////////////////////////////
 : // 
 : // DIAMETER_MSG
 : //
 : //
 : ////////////////////////////////////////////
 : #ifndef _DIAMETER_MSG_H
 : #define _DIAMETER_MSG_H
 : 
 : #include <vector>
 : #include "CBBByteArray.h"
 : #include "DIAMETER_defs.h"
 : #include "DIAMETER_avp.h"
 : 
 : class DIAMETER_msg
 : {
 :   public :
 :         DIAMETER_msg();
 :         DIAMETER_msg(const DIAMETER_msg& obj);
 :         virtual ~DIAMETER_msg();
 :         DIAMETER_msg& operator=(const DIAMETER_msg& obj);
 :         virtual CBBByteArray encode_binary();
 :         virtual int decode_binary (CBBByteArray &packet);
 :         virtual CBBString encode_string();
 :         virtual int decode_string (char *sp, int offset, int length);
 :         virtual void setCode(unsigned int code) { _code = code; }
 :         virtual void setFlags(unsigned int flags) { _flags = flags; }
 :         virtual void setApplicationID(unsigned int app_id) { _application_id = app_id; }
 :         virtual void setHopHop(unsigned int id) { _hop_hop = id; }
 :         virtual void setEndEnd(unsigned int id) { _end_end = id; }
 :         virtual void setAvp(const DIAMETER_avp& avp) { _avp.push_back(avp); }
 :         virtual unsigned int getCode() const { return _code; }
 :         virtual unsigned int getFlags() const { return _flags; }
 :         virtual unsigned int getApplicationID() const { return _application_id; }
 :         virtual unsigned int getHopHop() const { return _hop_hop; }
 :         virtual unsigned int getEndEnd() const { return _end_end; }
 :         virtual int getNumAvp() const { return (int)(_avp.size()); }
 :         virtual DIAMETER_avp getAvp(int index) const;
 :         virtual CBBString getNameFromCode(unsigned int code);
 :         virtual unsigned int getCodeFromName(CBBString& name);
 :         virtual bool getTypeFromName(CBBString& name);
 :         
 :   private :
 :         // RFC 3588
 :         typedef struct diameter_msg_hdr_s
 :         {
 :                 unsigned int    _version_length;
 :                 unsigned int    _flags_command;
 :                 unsigned int    _application_id;
 :                 unsigned int    _hop_hop;
 :                 unsigned int    _end_end;
 :         }diameter_msg_hdr_t;
 :         
 :         typedef struct diameter_msg_list_s
 :         {
 :                 unsigned int    _code;
 :                 const char      *_name;
 :         }diameter_msg_list_t;
 :         
 :         unsigned int            _code;
 : 
#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Connection Failure Detection
   Device Watchdog Request/Answer (DWR/DWA) enables a Diameter Client to keep the connection open when it is not in use.
   - A DWR will be sent by the client in the following cases:
     *No CCR sent within “Idle-Connection” timeout from the last response – just to keep the connection alive.*

*** int dwd_send(int client_sock)                                  :noexport:
#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

 : int dwd_send(int client_sock) {
 : 	DIAMETER_msg dwd;
 : 	DIAMETER_avp avp1;
 : 	dwd.setCode(DIAMETER_DEVICE_WATCHDOG);
 : 	dwd.setFlags(0x80);
 : 	dwd.setHopHop(hop_to_hop++);
 : 	dwd.setEndEnd(end_to_end++);
 : 	avp1.setCode(AVP_NAME_ORIGIN_HOST);
 : 	avp1.setValue(LocalHost.data());
 : 	dwd.setAvp(avp1);
 : 	DIAMETER_avp avp2;
 : 	avp2.setCode(AVP_NAME_ORIGIN_REALM);
 : 	avp2.setValue("uscc.net");
 : 	dwd.setAvp(avp2);
 : 	return (write_diameter(client_sock, dwd));
 : }
 : 

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** initialize Session (Session ID)
   The Origin-Host (*AVP code 264*) is mandatory in all Diameter messages. The Origin-Host uniquely identifies the Diameter Client from which the request message originates. 
   The ID of the Diameter Client is used by Amdocs Online Charging to identify the session. The Origin‑Host is echoed on all types of message responses.

***  void init_session_id(unsigned int val)                        :noexport:

#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT

 : void init_session_id(unsigned int val) {
 : 	char timestamp[256];
 : 	time_t current_time = time((time_t *) 0);
 : 	sprintf(timestamp, "%s;%u;%u", LocalHost.data(), current_time, val);
 : 	SessionID = std::string(timestamp);
#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Create the CCR Interface
   Tell the diameter server to initialize the CCR interface.
*** int gy_ccr_initial(int client_sock)                            :noexport:

#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT
 :   int gy_ccr_initial(int client_sock) {
 :   DIAMETER_avp requested_service_unit;
 :   requested_service_unit.setCode(AVP_NAME_REQUESTED_SERVICE_UNIT);
 : 
 :   DIAMETER_avp exponent_avp;
 :   exponent_avp.setCode(AVP_NAME_EXPONENT);
 :   exponent_avp.setValue(htonl(2));
 :   DIAMETER_avp value_digits_avp;
 :   value_digits_avp.setCode(AVP_NAME_VALUE_DIGITS);
 :   value_digits_avp.setLongValue(htonll(1000LL));
 :   DIAMETER_avp unit_value_avp;
 :   unit_value_avp.setCode(AVP_NAME_UNIT_VALUE);
 :   unit_value_avp.setAvp(value_digits_avp);
 :   unit_value_avp.setAvp(exponent_avp);
 :   DIAMETER_avp currency_code_avp;
 :   currency_code_avp.setCode(AVP_NAME_CURRENCY_CODE);
 :   currency_code_avp.setValue(htonl(840));	// USD
 :   DIAMETER_avp cc_money_avp;
 :   cc_money_avp.setCode(AVP_NAME_CC_MONEY);
 :   cc_money_avp.setAvp(unit_value_avp);
 :   cc_money_avp.setAvp(currency_code_avp);
 :   requested_service_unit.setAvp(cc_money_avp);
 :   avp_list.push_back(requested_service_unit);
 : 
 :   DIAMETER_avp purchase_category_code_avp;
 :   purchase_category_code_avp.setCode(1104);
 :   purchase_category_code_avp.setVendorID(11580);
 :   purchase_category_code_avp.setValue("Charge_Code_Description");
 :   avp_list.push_back(purchase_category_code_avp);
 : 
 :   DIAMETER_avp application_type_avp;
 :   application_type_avp.setCode(1105);
 :   application_type_avp.setVendorID(11580);
 :   application_type_avp.setValue("Charge_Code_Description");
 :   avp_list.push_back(application_type_avp);
 : 
 :   return (gy_ccr_send(client_sock, cc_request_type_initial_request, 0));
 :  }

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Direct Debit
   Debit a customers account.

*** (gy_ccr_event(client_sock,cc_request_action_direct_debit)      :noexport:

#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT
 :      int gy_ccr_event(int client_sock, int requested_action) {
 : 
 :        DIAMETER_avp requested_service_unit;
 :        requested_service_unit.setCode(AVP_NAME_REQUESTED_SERVICE_UNIT);
 : 
 :        DIAMETER_avp exponent_avp;
 :        exponent_avp.setCode(AVP_NAME_EXPONENT);
 :        exponent_avp.setValue(htonl(2));
 :        DIAMETER_avp value_digits_avp;
 :        value_digits_avp.setCode(AVP_NAME_VALUE_DIGITS);
 :        value_digits_avp.setLongValue(htonll(1000LL));
 :        DIAMETER_avp unit_value_avp;
 :        unit_value_avp.setCode(AVP_NAME_UNIT_VALUE);
 :        unit_value_avp.setAvp(value_digits_avp);
 :        unit_value_avp.setAvp(exponent_avp);
 :        DIAMETER_avp currency_code_avp;
 :        currency_code_avp.setCode(AVP_NAME_CURRENCY_CODE);
 :        currency_code_avp.setValue(htonl(840));	// USD !!!!!!!~ This is it.....
 :        DIAMETER_avp cc_money_avp;
 :        cc_money_avp.setCode(AVP_NAME_CC_MONEY);
 :        cc_money_avp.setAvp(unit_value_avp);
 :        cc_money_avp.setAvp(currency_code_avp);
 :        requested_service_unit.setAvp(cc_money_avp);
 :        avp_list.push_back(requested_service_unit);
 : 
 :        DIAMETER_avp purchase_category_code_avp;
 :        purchase_category_code_avp.setCode(1104);
 :        purchase_category_code_avp.setVendorID(11580);
 :        purchase_category_code_avp.setValue("Charge_Code_Description");
 :        avp_list.push_back(purchase_category_code_avp);
 : 
 :        DIAMETER_avp application_type_avp;
 :        application_type_avp.setCode(1105);
 :        application_type_avp.setVendorID(11580);
 :        application_type_avp.setValue("Charge_Code_Description");
 :        avp_list.push_back(application_type_avp);
 : 
 :        return (gy_ccr_send(client_sock, cc_request_type_event_request,
 : 			   requested_action));
 :      }
 :
     
#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Refund Account
   - *gy_ccr_event(client_sock,cc_request_action_refund_account)*

** Check Balance
   - *gy_ccr_event(client_sock,cc_request_action_check_balance)*

** Price Enquiry
   - *gy_ccr_event(client_sock,cc_request_action_price_enquiry)*

** Send Terminal

   Used to cancel or commit a DCCA conection

*** gy_ccr_terminal(client_sock)                                   :noexport:
#+BEGIN_EXPORT latex
\footnotesize
#+END_EXPORT     
 :  int gy_ccr_terminal(int client_sock) {
 :   DIAMETER_avp requested_service_unit;
 :   requested_service_unit.setCode(AVP_NAME_REQUESTED_SERVICE_UNIT);
 : 
 :   DIAMETER_avp exponent_avp;
 :   exponent_avp.setCode(AVP_NAME_EXPONENT);
 :   exponent_avp.setValue(htonl(2));
 :   DIAMETER_avp value_digits_avp;
 :   value_digits_avp.setCode(AVP_NAME_VALUE_DIGITS);
 :   //value_digits_avp.setLongValue(htonll(0LL));	// CANCEL
 :   value_digits_avp.setLongValue(htonll(1000LL));	// COMMIT
 :   DIAMETER_avp unit_value_avp;
 :   unit_value_avp.setCode(AVP_NAME_UNIT_VALUE);
 :   unit_value_avp.setAvp(value_digits_avp);
 :   unit_value_avp.setAvp(exponent_avp);
 :   DIAMETER_avp currency_code_avp;
 :   currency_code_avp.setCode(AVP_NAME_CURRENCY_CODE);
 :   currency_code_avp.setValue(htonl(840));	// USD
 :   DIAMETER_avp cc_money_avp;
 :   cc_money_avp.setCode(AVP_NAME_CC_MONEY);
 :   cc_money_avp.setAvp(unit_value_avp);
 :   cc_money_avp.setAvp(currency_code_avp);
 :   requested_service_unit.setAvp(cc_money_avp);
 :   avp_list.push_back(requested_service_unit);
 : 
 :   DIAMETER_avp purchase_category_code_avp;

 :   purchase_category_code_avp.setCode(1104);
 :   purchase_category_code_avp.setVendorID(11580);
 :   purchase_category_code_avp.setValue("Charge_Code_Description");
 :   avp_list.push_back(purchase_category_code_avp);
 : 
 :   DIAMETER_avp application_type_avp;
 :   application_type_avp.setCode(1105);
 :   application_type_avp.setVendorID(11580);
 :   application_type_avp.setValue("Charge_Code_Description");
 :   avp_list.push_back(application_type_avp);
 : 
 :   return (gy_ccr_send(client_sock, cc_request_type_terminal_request, 0));
 : }

#+BEGIN_EXPORT latex
\normalsize
#+END_EXPORT

** Disconnection
   Both the client and server can issue a disconnect.

*** Disconnect Code
    Close socket to disconnect.

* Loopback4
  LoopBack is an award-winning, highly extensible, open-source Node.js and TypeScript framework based on Express. 
  It enables you to quickly create APIs and microservices composed from backend systems such as databases and SOAP or REST services.
  The classic loopback example is a Shopping app. 

* Openshift
  OpenShift is a family of containerization software products developed by Red Hat. Its flagship product is the 
  OpenShift Container Platform — an on-premises platform as a service built around Docker containers orchestrated 
  and managed by Kubernetes on a foundation of Red Hat Enterprise Linux. The family's other products provide this 
  platform through different environments: OKD serves as the community-driven upstream (akin to the way that Fedora 
  is upstream of Red Hat Enterprise Linux), OpenShift Online is the platform offered as software as a service, 
  and Openshift Dedicated is the platform offered as a managed service.

* Session Management						   :noexport:
** Source Identifier
The Origin-Host (AVP code 264) is mandatory in all Diameter messages. 

** Session-ID AVP and CC-Request-Number AVP
The Session ID identifies a session-based interaction between the Diameter Client and Amdocs Online Charging. 

*** OCS Handling of Duplicate Requests
Message attributes (Event-Timestamp, Subscription-Id-Data,) are logged into a processed-transactions table for every reservation or charge message that is checked for a duplicate. 

* Communication Problems					   :noexport:
  OCS supports a degraded mode of operations – useful in cases when a real time connection between Diameter Client and Diameter Server is lost.

  These are all client errors.

** TCP/IP Level Error

** No CCA Received in Specified Timeout

* CHARGING PARAMETERS– IMPLEMENTING VALID VALUES 		   :noexport:

* AVP DESCRIPTIONS						   :noexport:
  The following table contains descriptions of all AVP protocol attributes. 
  The current table is a Data Dictionary original for both client and server systems.
  - M – This AVP will always be present in the message.
  - C – This AVP shall be present in the message only when certain conditions are met. These conditions are specified in the description column.
  - O – This AVP is optional.
* Tasklist                                                         :noexport:
** TODO Learn Docker and openshift
** TODO Figure out testing using a diameter server.
