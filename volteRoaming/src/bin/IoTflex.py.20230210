#! /usr/bin/python3

'''
Created on April 28, 2022
@author: dbalchen

'''
# Oracle Libraries
import cx_Oracle

import fileinput
import sys
import copy

# libraries used for sending emails
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.utils import formatdate
from email import encoders

# import Workbook used for writing
from openpyxl import Workbook
from openpyxl.styles import Font

from dateutil.relativedelta import relativedelta
from datetime import datetime

sendTo = ["david.balchen@uscellular.com","Claude.Ham@uscellular.com","Robert.McClendon@uscellular.com", "bhumika.chudasama@uscellular.com","USCDLISBilling-UsageDevandOps@uscellular.com", "Michael.Joseph@uscellular.com","USCDLRA-Monitoring&Metrics@uscellular.com","Christine.Bekos@uscellular.com", "Marvin.Guss@uscellular.com", "RevenueAccounting@uscellular.com", "xavier.lbataille@uscellular.com", "mark.foster@uscellular.com", "gabe.hedstrom@uscellular.com", "dean.schempp@uscellular.com", "Sandra.Fitts@uscellular.com", "olivia.solis@uscellular.com"]
sendTo = ["david.balchen@uscellular.com"]

# Font setup   
def_font = Font(name='Arial', size=10, color='FF000000', italic=False, bold=False)
bold_font = Font(name='Arial', size=10, color='FF000000', italic=False, bold=True)
red_font = Font(name='Arial', size=10, color='00FF0000', italic=True, bold=False)

sqlDictionary = {}

sqlDictionary["IOT_RATE_PLAN"] = """
  SELECT *
  FROM IOT_RATE_PLAN t1,
       (  SELECT t2.start_date, MIN (ABS (t2.start_date - to_date('{this_month}','YYYYMMDD'))) diff
            FROM IOT_RATE_PLAN t2
        GROUP BY t2.start_date) b
 WHERE ABS (t1.start_date - to_date('{this_month}','YYYYMMDD')) = (b.diff)
 and t1.start_date <= to_date('{this_month}','YYYYMMDD')
 and (t1.end_date >= to_date('{this_month}','YYYYMMDD') 
      or t1.end_date is NULL)
 order by TADIG, IMSI_BILLING_TYPE, PLAN_ID, t1.start_date desc
"""

sqlDictionary["IOT_PARTNER"] = """
select unique(tadig),mvno_name from IOT_PARTNER
"""

sqlDictionary["IOT_IMSI_RANGE"] = """
select * from IOT_IMSI_RANGE t1,
 (  SELECT t2.start_date, MIN (ABS (t2.start_date - to_date('{this_month}','YYYYMMDD'))) diff
            FROM IOT_IMSI_RANGE t2
        GROUP BY t2.start_date) b
 WHERE ABS (t1.start_date - to_date('{this_month}','YYYYMMDD')) = (b.diff)
 and t1.start_date <= to_date('{this_month}','YYYYMMDD')
 and (t1.end_date >= to_date('{this_month}','YYYYMMDD') 
      or t1.end_date is NULL) 
order by t1.TADIG, t1.IMSI_BILLING_TYPE, t1.start_DATE desc
"""

sqlDictionary["OFF_NET"] = """
 select b.IMSI,b.TADIG, count(*) "Total Off-Net Records",
 sum(b.TOTAL_CALL_EVENT_DURATION)/60 "Total Minutes",
 (sum(b.DATA_VOLUME_INCOMING)/1024) "Total Offnet Data Incoming",
 sum(b.DATA_VOLUME_OUTGOING/1024) "Total Offnet Data Outgoing",
 sum((b.DATA_VOLUME_INCOMING/1024) + b.DATA_VOLUME_OUTGOING/1024) "Total Offnet Data",
 nvl(sum(b.CHARGE),0.00) "Total Offnet Record Charges"
 from  IOT_AGGREGATOR_OFF_NET_USAGE b
 where b.CALL_EVENT_START_TIMESTAMP >= to_date('{last_month}','YYYYMMDD') 
 and b.CALL_EVENT_START_TIMESTAMP < to_date('{this_month}','YYMMDD')
 group by b.IMSI,b.TADIG
 order by b.IMSI,b.TADIG
"""

sqlDictionary["ON_NET"] = """
select a.IMSI,a.TADIG, count(*) "Total Onnet Records",
(sum(a.DATA_VOLUME_INCOMING)/1024) "Total Onnet Data Incoming",
sum(a.DATA_VOLUME_OUTGOING/1024) "Total Onnet Data Outgoing",
sum((a.DATA_VOLUME_INCOMING/1024) + a.DATA_VOLUME_OUTGOING/1024) "Total Onnet Data"
from  IOT_AGGREGATOR_ON_NET_USAGE a
where a.CALL_EVENT_START_TIMESTAMP >= to_date('{last_month}','YYYYMMDD') 
and a.CALL_EVENT_START_TIMESTAMP < to_date('{this_month}','YYMMDD')
group by a.IMSI,a.TADIG
order by a.IMSI,a.TADIG
"""

headings = {}

headings["IoT_IMSI"] = [
"IMSI",
"Total Off Network Records",
"Total Session Duration (Minutes)",
"Off Network Incoming KB",
"Off Network Outgoing KB",
"Total Off Network Data",
"Total Off Network Record Charges $",
"Total On Network Records",
"On Network Incoming KB",
"On Network Outgoing KB",
"Total On Network Data",
];

headings["IoT_IMSI_SUFFIX"] = [
"Total Off Network Charges $",
"Total On Network Charges $",
"Total Charges $"];

tab = {}
tab["IoT_IMSI"] = "IoT {tadig} by IMSI"; 


def sendMail (xfile, mesg, subject, who):
    
    msg = MIMEMultipart()
    msg['From'] = "david.balchen@uscellular.com"
    msg['To'] = who
    msg['Date'] = formatdate(localtime=True)
    msg['Subject'] = subject
    msg.attach(MIMEText(mesg))

    part = MIMEBase('application', "octet-stream")
    part.set_payload(open(xfile, "rb").read())
    encoders.encode_base64(part)
    part.add_header('Content-Disposition', 'attachment; filename="' + xfile + '"')
    msg.attach(part)

    smtp = smtplib.SMTP("localhost", 25)
    smtp.sendmail("david.balchen@uscellular.com", who, msg.as_string())
    smtp.quit()
    return;


def dbConnect ():
    
    CONN_INFO = {
        'host': '10.180.171.15',  # info from tnsnames.ora
        'port': 1530,  # info from tnsnames.ora
        'user': 'md1dbal1',
        'psw': 'cgkjxdsl;GG#',
        'service': 'bodsdev_adhoc'  # info from tnsnames.ora
    }
    CONN_STR = '{user}/{psw}@{host}:{port}/{service}'.format(**CONN_INFO)
  
#    tconn = cx_Oracle.connect(CONN_STR)

    tconn = cx_Oracle.connect(user='', password='', dsn="BODS_SVC_BILLINGOPS")
    
    return tconn;


def printRow (row, font, sheet, max_row, max_col=0): 
    for i in range(0, len(row) - max_col):
        sheet.cell(row=max_row, column=(i + 1)).value = row[i] 
        sheet.cell(row=max_row, column=(i + 1)).font = font
        if i > 2: 
            sheet.cell(row=max_row, column=(i + 1)).number_format = '0.00'             
    return;


def printSheet (title, header, sheet, output, flag=0):
    sheet.title = title
    
    printRow(header, bold_font, sheet, 1)
    max_row = 2 

    for row in output:
        font = def_font

        # Modify fonts here

        printRow(row, font, sheet, max_row, (len(row) - len(header)))
        max_row = max_row + 1 
    return

######################################################################################
# 


def  processUsage(wb, OnNetusage, OffNetusage, count=0):
    
    tadigOff = sorted(set(map(lambda x:x[1], OffNetusage)))
    tadigOn = sorted(set(map(lambda x:x[1], OnNetusage)))

    tadig = sorted(set(tadigOff + tadigOn))
    
    for tad in tadig: 
 
        pp = sorted(set(map(lambda x:x[1], [x for x in iot_rate_plan if (x[0] == tad)])))        
        mcol = 0
                
        for ppp in pp:
            hm = len([x for x in iot_rate_plan if (x[0] == tad and x[1] == ppp)])
            if hm > mcol:
                mcol = hm
                   
        heading = copy.copy(headings["IoT_IMSI"])
        
        for i in range(1, mcol + 1):
            heading.append("Plan " + str(i) + " Charged Units KB")
                    
        heading = heading + copy.copy(headings["IoT_IMSI_SUFFIX"])
            
        print("tadig = ")
        print(tad)
        print("\n")
        
        mvno = [x for x in iotPartner if x[0] == tad][0][1]
    
        on = [x for x in OnNetusage if x[1] == tad]
        off = [x for x in OffNetusage if x[1] == tad]
        
        onimsi = sorted(set(map(lambda x:x[0], on)))
        offimsi = sorted(set(map(lambda x:x[0], off))) 
        
        imsis = sorted(set(onimsi + offimsi))
        
        output = []
        
        for imsi in imsis:
            
            totNetCharges = 0.00
            
            rate_plan = []
                      
            try:
                onrow = list([x for x in on if x[0] == imsi][0])
            except:
                onrow = list([imsi, tad, 0.00, 0.00, 0.00, 0.00])
                pass
            
            try:
                offrow = list([x for x in off if x[0] == imsi][0])
            except:
                offrow = list([imsi, tad, 0.00, 0, 0, 0, 0, 0])
                pass
                          
# this is the row output....
                          
            rowTuple = list((int(offrow[0]), int(offrow[2]), float(offrow[3]), float(offrow[4]), float(offrow[5]), float(offrow[6]), float(offrow[7]), float(onrow[2]), float(onrow[3]), float(onrow[4]), float(onrow[5])))
            
            try:
                planID = [x for x in iot_imsi_range if (x[0] == tad and (int(imsi) >= int(x[2]) and int(imsi) <= int(x[3]))) ][0][1]
            except:
                print("IMSI not in line range for tad\n", file=sys.stderr)
                print(tad, file=sys.stderr) 
                print("\n", file=sys.stderr)    
                pass
  
            totalKB = round(float(offrow[6]) + float(onrow[5]))
            
            try: 
                rate_plan = [x for x in iot_rate_plan if (x[0] == tad and float(totalKB) >= float(x[3]) and float(totalKB) <= float(x[4]))][0]
                
            except:
                print("No Rate Plan for tad\n  :", file=sys.stderr)
                print(tad, file=sys.stderr) 
                print("\n", file=sys.stderr)   
                    
                rate_plan = list([tad, "None", 'Plan1', 0.00, 0.00, 0.00, 0.00, 0.00, 0.00])
                    
                pass     
 
            try: 
                plans = [x for x in iot_rate_plan if (x[1] == planID and x[0] == tad)]
                plans = sorted(set(map(lambda x:x[2], plans)))
                
            except: 
                plans = ['Plan1']
                    
                pass                             
                          
            offNetCharges = (float(rate_plan[6]) * (float(offrow[6]) / 1024));  # + offrow[7]);    
      
            onNetCharges = (float(rate_plan[6]) * (float(onrow[5]) / 1024));
            
            # New routine
            
            for plan in plans:
                
                if rate_plan[2] == plan:
                    rowTuple.append(totalKB)
                else:
                   rowTuple.append(0.00)
              
            if mcol > len(plans):
                rowTuple.append(0.00)    

            rowTuple.append(offNetCharges)
            rowTuple.append(onNetCharges)
            
            rowTuple.append(onNetCharges + offNetCharges + float(rate_plan[7]))
            
            output.append(tuple(rowTuple))            
    
        if count == 0:
            printSheet(tab["IoT_IMSI"].format(tadig=mvno, onOff=onOff), heading, wb.active, output, 1);
        else: 
            printSheet(tab["IoT_IMSI"].format(tadig=mvno, onOff=onOff), heading, wb.create_sheet(tab["IoT_IMSI"].format(tadig=mvno, onOff=onOff)), output, 1);
        
        count = count + 1

    return count


if __name__ == '__main__':
    pass

# Date setup

#timeStamp = sys.argv[1] 
timeStamp = '20221201'
this_month = timeStamp[0:6] + "01"
year = this_month[0:4]
monthName = (datetime.strptime(this_month, '%Y%m%d')).strftime("%B")

last_month = datetime.strptime(this_month, "%Y%m%d")
last_month = (last_month - relativedelta(months=1)).strftime('%Y%m%d')

# Email title and message
title = """The IoT Usage Report for """ + monthName + """ 1st """ + """, """ + year 
message = "Attached to this email is the IoT Usage Report for " + monthName + """ 1st """ + """, """ + year + "\n\n"

# Open an Excel file for output

excel_file = title + '.xlsx'
wb = Workbook()

# Database

# conn = dbConnect()
# cursor = conn.cursor()

# Load Reference tables into a list.

iotPartner = []
sql = sqlDictionary["IOT_PARTNER"].format(last_month=last_month, this_month=this_month)
print(sql)
 
# cursor.execute(sql)
# iotPartner = cursor.fetchall()
  
for line in fileinput.input("/home/dbalchen/Desktop/IOT_PARTNER.csv"):
    try:
        line = line.rstrip()
        iotPartner.append(tuple(line.split("\t")))
    except:pass

iot_imsi_range = []
sql = sqlDictionary["IOT_IMSI_RANGE"].format(last_month=last_month, this_month=this_month)
print(sql)
 
# cursor.execute(sql)
# iot_imsi_range = cursor.fetchall()
# 
for line in fileinput.input("/home/dbalchen/Desktop/IOT_IMSI_RANGE.csv"):
    try:
        line = line.rstrip()
        iot_imsi_range.append(tuple(line.split("\t")))
    except:pass

iot_rate_plan = []
sql = sqlDictionary["IOT_RATE_PLAN"].format(last_month=last_month, this_month=this_month)
print(sql)
 
# cursor.execute(sql)
# iot_rate_plan = cursor.fetchall()

for line in fileinput.input("/home/dbalchen/Desktop/IOT_RATE_PLAN.csv"):
    try:
        line = line.rstrip()
        iot_rate_plan.append(tuple(line.split("\t")))
    except:pass

OnNetusage = []
sql = sqlDictionary["ON_NET"].format(last_month=last_month, this_month=this_month)
print(sql)

onOff = 'OnNet'  # example
 
# cursor.execute(sql)
# OnNetusage = cursor.fetchall()

for line in fileinput.input("/home/dbalchen/Desktop/IOT_AGGREGATOR_ON_NET_USAGE.csv"):
    try:
        line = line.rstrip()
        OnNetusage.append(tuple(line.split("\t")))
    except:pass

OffNetusage = []
sql = sqlDictionary["OFF_NET"].format(last_month=last_month, this_month=this_month)
print(sql)

onOff = 'OffNet'  # example
 
# cursor.execute(sql)
# OffNetusage = cursor.fetchall()

for line in fileinput.input("/home/dbalchen/Desktop/IOT_AGGREGATOR_OFF_NET_USAGE.csv"):
    try:
        line = line.rstrip()
        OffNetusage.append(tuple(line.split("\t")))
    except:pass

count = processUsage(wb, OnNetusage, OffNetusage)

wb.save(excel_file)

# Close database connection
# cursor.close()
#     
# conn.close()

#    Send report to our business partners.
for who in sendTo:
    sendMail(excel_file, message, title, who)
    
SystemExit(0);

